outputs:
  env_name:
    description: 'Environment name (from build dispatch)'
    value: ${{ steps.bdisp.outputs.env_name }}
  env_key:
    description: 'Environment key (from build dispatch)'
    value: ${{ steps.bdisp.outputs.env_key }}
  image_tag:
    description: 'Image tag (from build dispatch)'
    value: ${{ steps.bdisp.outputs.image_tag }}
  deploy_enabled:
    description: 'Whether deployment is enabled (from build dispatch)'
    value: ${{ steps.bdisp.outputs.deploy_enabled }}
  new:
    description: 'New semantic version computed by version dispatch.'
    value: ${{ steps.vdisp.outputs.new }}
  major:
    description: 'Major alias (vX) computed by version dispatch.'
    value: ${{ steps.vdisp.outputs.major }}
  minor:
    description: 'Minor alias (vX.Y) computed by version dispatch.'
    value: ${{ steps.vdisp.outputs.minor }}
  last:
    description: 'Previous version tag reported by version dispatch.'
    value: ${{ steps.vdisp.outputs.last }}
  new_version:
    description: 'New semantic version computed by compute-next.'
    value: ${{ steps.vdisp.outputs.new }}
  major_version:
    description: 'Major alias (vX) computed by compute-next.'
    value: ${{ steps.vdisp.outputs.major }}
  minor_version:
    description: 'Minor alias (vX.Y) computed by compute-next.'
    value: ${{ steps.vdisp.outputs.minor }}
  last_version:
    description: 'Previous version tag reported by compute-next.'
    value: ${{ steps.vdisp.outputs.last }}
name: 'Uncover Actions'
description: 'Aggregator entrypoint to call sub-actions via a short ref: uncoverthefuture-org/actions@v1.0.18'

inputs:
  subaction:
    description: "Sub-action to run (use 'help' or leave empty to list available)"
    required: false
  category:
    description: "Optional category to route: build | podman | infra | app (auto-derived from subaction if omitted)"
    required: false
  params_json:
    description: "JSON blob of parameters to pass to the selected subaction (keeps this file small)"
    required: false


runs:
  using: 'composite'
  steps:
    - name: Prepare bundled actions
      shell: bash
      run: |
        set -euo pipefail
        dest=".github/actions"
        if [ ! -d "$dest/common/route-category" ]; then
          mkdir -p "$dest"
          cp -a "$GITHUB_ACTION_PATH/.github/actions/." "$dest/"
        fi

    - name: Help (list available actions)
      if: ${{ !inputs.subaction || inputs.subaction == 'help' }}
      uses: ./.github/actions/common/print-help

    - name: Determine category
      if: ${{ inputs.subaction && inputs.subaction != 'help' }}
      id: route
      uses: ./.github/actions/common/route-category
      with:
        subaction: ${{ inputs.subaction }}
        category: ${{ inputs.category }}

    - name: Build dispatch
      id: bdisp
      if: ${{ inputs.subaction && inputs.subaction != 'help' && steps.route.outputs.category == 'build' }}
      uses: ./.github/actions/build/dispatch
      with:
        subaction: ${{ inputs.subaction }}
        params_json: ${{ inputs.params_json }}

    - name: Podman dispatch
      if: ${{ inputs.subaction && inputs.subaction != 'help' && steps.route.outputs.category == 'podman' }}
      uses: ./.github/actions/podman/dispatch
      with:
        subaction: ${{ inputs.subaction }}
        params_json: ${{ inputs.params_json }}

    - name: Infra dispatch
      if: ${{ inputs.subaction && inputs.subaction != 'help' && steps.route.outputs.category == 'infra' }}
      uses: ./.github/actions/infra/dispatch
      with:
        subaction: ${{ inputs.subaction }}
        params_json: ${{ inputs.params_json }}

    - name: App dispatch
      if: ${{ inputs.subaction && inputs.subaction != 'help' && steps.route.outputs.category == 'app' }}
      uses: ./.github/actions/app/dispatch
      with:
        subaction: ${{ inputs.subaction }}
        params_json: ${{ inputs.params_json }}

    - name: Version dispatch
      id: vdisp
      if: ${{ inputs.subaction && inputs.subaction != 'help' && steps.route.outputs.category == 'version' }}
      uses: ./.github/actions/version/dispatch
      with:
        subaction: ${{ inputs.subaction }}
        params_json: ${{ inputs.params_json }}
