name: 'Deploy Django API'
description: 'Deploys the Django API Docker container to a remote server via SSH.'

inputs:
  env_name:
    description: 'Environment name'
    required: true
  image_tag:
    description: 'Image tag to deploy'
    required: true
  registry:
    description: 'Docker registry'
    required: false
    default: 'ghcr.io'
  image_name:
    description: 'Docker image name'
    required: true
  ssh_host:
    description: 'SSH host'
    required: true
  ssh_user:
    description: 'SSH username'
    required: true
  ssh_key:
    description: 'SSH private key'
    required: true
  root_ssh_key:
    description: 'SSH private key for root user (optional, used if podman_user is root)'
    required: false
  podman_user:
    description: 'User to run podman as'
    required: false
    default: 'deployer'
  ghcr_username:
    description: 'GitHub Container Registry username'
    required: true
  ghcr_token:
    description: 'GitHub Container Registry token'
    required: true
  env_file_path:
    description: 'Path to the environment file on the server'
    required: false
    default: '/opt/ekaban/api/.env.'

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      run: |
        if [ -z "${{ inputs.env_name }}" ]; then
          echo "Error: env_name is required"
          exit 1
        fi
        if [ -z "${{ inputs.image_tag }}" ]; then
          echo "Error: image_tag is required"
          exit 1
        fi
        if [ -z "${{ inputs.image_name }}" ]; then
          echo "Error: image_name is required"
          exit 1
        fi
        if [ -z "${{ inputs.ssh_host }}" ]; then
          echo "Error: ssh_host is required"
          exit 1
        fi
        if [ -z "${{ inputs.ssh_user }}" ]; then
          echo "Error: ssh_user is required"
          exit 1
        fi
        if [ -z "${{ inputs.ssh_key }}" ]; then
          echo "Error: ssh_key is required"
          exit 1
        fi
        if [ "${{ inputs.podman_user }}" = "root" ] && [ -z "${{ inputs.root_ssh_key }}" ]; then
          echo "Warning: podman_user is root but root_ssh_key is not provided. Using ssh_key for root."
        fi
        if [ -z "${{ inputs.ghcr_username }}" ]; then
          echo "Error: ghcr_username is required"
          exit 1
        fi
        if [ -z "${{ inputs.ghcr_token }}" ]; then
          echo "Error: ghcr_token is required"
          exit 1
        fi
      shell: bash
    - name: Deploy as root
      if: inputs.podman_user == 'root'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ inputs.ssh_host }}
        username: 'root'
        key: ${{ inputs.root_ssh_key || inputs.ssh_key }}
        script: |
          set -euo pipefail

          ENV_FILE="${{ inputs.env_file_path }}${{ inputs.env_name }}"

          if [ ! -f "${ENV_FILE}" ]; then
            echo "Environment file ${ENV_FILE} not found" >&2
            exit 1
          fi

          set -a
          . "${ENV_FILE}"
          set +a

          HOST_PORT="${API_HOST_PORT:-${PORT:-8000}}"
          CONTAINER_PORT="${API_CONTAINER_PORT:-${TARGET_PORT:-8000}}"
          CONTAINER_NAME="ekaban-api-${{ inputs.env_name }}"

          PODMAN_USER="${{ inputs.podman_user }}"
          PODMAN_USER="${PODMAN_USER:-deployer}"

          run_podman() {
            if [ "$(id -un)" = "$PODMAN_USER" ]; then
              podman "$@"
            else
              sudo -H -u "$PODMAN_USER" podman "$@"
            fi
          }

          run_podman login ${{ inputs.registry }} -u ${{ inputs.ghcr_username }} -p ${{ inputs.ghcr_token }}
          run_podman pull ${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.image_tag }}
          run_podman stop "${CONTAINER_NAME}" >/dev/null 2>&1 || true
          run_podman rm "${CONTAINER_NAME}" >/dev/null 2>&1 || true
          run_podman run --rm --env-file "${ENV_FILE}" \
            ${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.image_tag }} \
            python manage.py migrate --noinput
          run_podman run -d --name "${CONTAINER_NAME}" --env-file "${ENV_FILE}" \
            -p "${HOST_PORT}:${CONTAINER_PORT}" --restart=unless-stopped \
            ${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.image_tag }}

    - name: Deploy as user
      if: inputs.podman_user != 'root'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_user }}
        key: ${{ inputs.ssh_key }}
        script: |
          set -euo pipefail

          ENV_FILE="${{ inputs.env_file_path }}${{ inputs.env_name }}"

          if [ ! -f "${ENV_FILE}" ]; then
            echo "Environment file ${ENV_FILE} not found" >&2
            exit 1
          fi

          set -a
          . "${ENV_FILE}"
          set +a

          HOST_PORT="${API_HOST_PORT:-${PORT:-8000}}"
          CONTAINER_PORT="${API_CONTAINER_PORT:-${TARGET_PORT:-8000}}"
          CONTAINER_NAME="ekaban-api-${{ inputs.env_name }}"

          PODMAN_USER="${{ inputs.podman_user }}"
          PODMAN_USER="${PODMAN_USER:-deployer}"

          run_podman() {
            if [ "$(id -un)" = "$PODMAN_USER" ]; then
              podman "$@"
            else
              sudo -H -u "$PODMAN_USER" podman "$@"
            fi
          }

          run_podman login ${{ inputs.registry }} -u ${{ inputs.ghcr_username }} -p ${{ inputs.ghcr_token }}
          run_podman pull ${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.image_tag }}
          run_podman stop "${CONTAINER_NAME}" >/dev/null 2>&1 || true
          run_podman rm "${CONTAINER_NAME}" >/dev/null 2>&1 || true
          run_podman run --rm --env-file "${ENV_FILE}" \
            ${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.image_tag }} \
            python manage.py migrate --noinput
          run_podman run -d --name "${CONTAINER_NAME}" --env-file "${ENV_FILE}" \
            -p "${HOST_PORT}:${CONTAINER_PORT}" --restart=unless-stopped \
            ${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.image_tag }}
