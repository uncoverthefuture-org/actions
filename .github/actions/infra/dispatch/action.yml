name: 'dispatch: infra'
description: 'Infra dispatch: route short calls to infra actions'

inputs:
  subaction:
    description: "prepare-ubuntu-host | apache-manage-vhost | install-podman | install-apache | install-webmin | install-certbot | request-certbot-cert | ensure-certbot-cert | configure-ufw | setup-podman-user | determine-domain | compute-host-port | check-dns-match | ensure-apache-installed | enable-apache-modules | manage-vhost-config | enable-site-reload"
    required: true
  params_json:
    description: "JSON blob of parameters to pass to the selected subaction"
    required: false

  # --- Remote connection (common) ---
  ssh_host:
    required: false
  ssh_user:
    required: false
  ssh_key:
    required: false
  root_ssh_key:
    required: false
  ssh_port:
    required: false
    default: '22'
  ssh_fingerprint:
    required: false
  podman_user:
    required: false
    default: 'deployer'
  connect_mode:
    required: false
    default: 'auto'

  # --- Host preparation toggles ---
  env_dir_path:
    required: false
  install_podman:
    required: false
    default: 'true'
  additional_packages:
    required: false
    default: 'jq curl ca-certificates'
  create_podman_user:
    required: false
    default: 'false'
  install_apache:
    required: false
    default: 'false'
  install_webmin:
    required: false
    default: 'true'
  install_certbot:
    required: false
    default: 'false'
  install_usermin:
    required: false
    default: 'true'
  configure_ufw:
    required: false
    default: 'true'
  ufw_allow_ports:
    required: false
    default: '22 80 443 10000 20000'

  # --- VHost & domain derivation ---
  domain:
    required: false
  base_domain:
    required: false
  env_name:
    required: false
  env_file_path:
    required: false
  source_env:
    required: false
    default: 'false'
  fail_if_env_missing:
    required: false
    default: 'true'
  host_port:
    required: false
  vhost_mode:
    required: false
    default: 'mod_wsgi'
  wsgi_script_path:
    required: false
  server_admin:
    required: false
    default: 'webmaster@localhost'
  require_dns_match:
    required: false
    default: 'true'
  domain_prefix_prod:
    required: false
    default: ''
  domain_prefix_staging:
    required: false
    default: 'staging'
  domain_prefix_dev:
    required: false
    default: 'dev'

  # --- Certbot options ---
  certbot_email:
    required: false
  certbot_extra_domains:
    required: false
  certbot_staging:
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Normalize params JSON
      id: pjson
      env:
        INPUT_PARAMS_JSON: ${{ inputs.params_json }}
      run: |
        set -euo pipefail
        J="${INPUT_PARAMS_JSON}"
        if [ -z "$J" ]; then J='{}'; fi
        echo "json=$J" >> "$GITHUB_OUTPUT"
      shell: bash
    - name: Compute repo defaults
      id: defaults
      uses: ./.github/actions/app/common/compute-defaults
    - name: Resolve remote inputs
      id: remote
      uses: ./.github/actions/infra/common/resolve-remote
      with:
        params_json: ${{ steps.pjson.outputs.json }}
        ssh_host: ${{ inputs.ssh_host }}
        ssh_user: ${{ inputs.ssh_user }}
        ssh_key: ${{ inputs.ssh_key }}
        root_ssh_key: ${{ inputs.root_ssh_key }}
        ssh_port: ${{ inputs.ssh_port }}
        ssh_fingerprint: ${{ inputs.ssh_fingerprint }}
        podman_user: ${{ inputs.podman_user }}
        connect_mode: ${{ inputs.connect_mode }}
    - name: Validate infra subaction
      run: |
        set -euo pipefail
        SA='${{ inputs.subaction }}'
        case "$SA" in prepare-ubuntu-host|apache-manage-vhost|install-podman|install-apache|install-webmin|install-certbot|request-certbot-cert|ensure-certbot-cert|configure-ufw|setup-podman-user|determine-domain|compute-host-port|check-dns-match|ensure-apache-installed|enable-apache-modules|manage-vhost-config|enable-site-reload) :;; *) echo "Error: unsupported infra subaction '$SA'" >&2; exit 1;; esac
      shell: bash

    - name: Validate base SSH for infra subactions
      env:
        SA: ${{ inputs.subaction }}
        SSH_HOST: ${{ steps.remote.outputs.ssh_host }}
        SSH_USER: ${{ steps.remote.outputs.ssh_user }}
        SSH_KEY: ${{ steps.remote.outputs.ssh_key }}
      run: |
        set -euo pipefail
        case "$SA" in
          prepare-ubuntu-host|apache-manage-vhost|install-podman|install-apache|install-webmin|install-certbot|request-certbot-cert|ensure-certbot-cert|configure-ufw|setup-podman-user|compute-host-port)
            for var in SSH_HOST SSH_USER SSH_KEY; do
              val="${!var}"
              if [ -z "$val" ]; then
                echo "Error: ${var,,} is required for $SA" >&2
                exit 1
              fi
            done
            ;;
        esac
      shell: bash

    - name: Run host subaction
      if: ${{ inputs.subaction == 'prepare-ubuntu-host' || inputs.subaction == 'install-podman' || inputs.subaction == 'install-apache' || inputs.subaction == 'install-webmin' || inputs.subaction == 'configure-ufw' || inputs.subaction == 'setup-podman-user' }}
      uses: ./.github/actions/infra/host
      with:
        params_json: ${{ inputs.params_json }}
        subaction: ${{ inputs.subaction }}
        ssh_host: ${{ steps.remote.outputs.ssh_host }}
        ssh_user: ${{ steps.remote.outputs.ssh_user }}
        ssh_key: ${{ steps.remote.outputs.ssh_key }}
        root_ssh_key: ${{ steps.remote.outputs.root_ssh_key }}
        ssh_port: ${{ steps.remote.outputs.ssh_port }}
        ssh_fingerprint: ${{ steps.remote.outputs.ssh_fingerprint }}
        podman_user: ${{ steps.remote.outputs.podman_user }}
        connect_mode: ${{ steps.remote.outputs.connect_mode }}
        env_dir_path: ${{ inputs.env_dir_path }}
        install_podman: ${{ inputs.install_podman }}
        additional_packages: ${{ inputs.additional_packages }}
        create_podman_user: ${{ inputs.create_podman_user }}
        install_apache: ${{ inputs.install_apache }}
        install_webmin: ${{ inputs.install_webmin }}
        install_certbot: ${{ inputs.install_certbot }}
        install_usermin: ${{ inputs.install_usermin }}
        configure_ufw: ${{ inputs.configure_ufw }}
        ufw_allow_ports: ${{ inputs.ufw_allow_ports }}

    - name: Run vhost subaction
      if: ${{ inputs.subaction == 'apache-manage-vhost' || inputs.subaction == 'determine-domain' || inputs.subaction == 'compute-host-port' || inputs.subaction == 'check-dns-match' || inputs.subaction == 'ensure-apache-installed' || inputs.subaction == 'enable-apache-modules' || inputs.subaction == 'manage-vhost-config' || inputs.subaction == 'enable-site-reload' }}
      uses: ./.github/actions/infra/vhost
      with:
        params_json: ${{ inputs.params_json }}
        subaction: ${{ inputs.subaction }}
        ssh_host: ${{ steps.remote.outputs.ssh_host }}
        ssh_user: ${{ steps.remote.outputs.ssh_user }}
        ssh_key: ${{ steps.remote.outputs.ssh_key }}
        root_ssh_key: ${{ steps.remote.outputs.root_ssh_key }}
        ssh_port: ${{ steps.remote.outputs.ssh_port }}
        ssh_fingerprint: ${{ steps.remote.outputs.ssh_fingerprint }}
        podman_user: ${{ steps.remote.outputs.podman_user }}
        connect_mode: ${{ steps.remote.outputs.connect_mode }}
        domain: ${{ inputs.domain }}
        base_domain: ${{ inputs.base_domain }}
        env_name: ${{ inputs.env_name }}
        env_file_path: ${{ inputs.env_file_path }}
        source_env: ${{ inputs.source_env }}
        fail_if_env_missing: ${{ inputs.fail_if_env_missing }}
        host_port: ${{ inputs.host_port }}
        vhost_mode: ${{ inputs.vhost_mode }}
        wsgi_script_path: ${{ inputs.wsgi_script_path }}
        server_admin: ${{ inputs.server_admin }}
        require_dns_match: ${{ inputs.require_dns_match }}
        domain_prefix_prod: ${{ inputs.domain_prefix_prod }}
        domain_prefix_staging: ${{ inputs.domain_prefix_staging }}
        domain_prefix_dev: ${{ inputs.domain_prefix_dev }}

    ]