# ============================================================================
# ACTION: Setup Podman User
# ============================================================================
# PURPOSE:
# Configures a user for rootless Podman container execution.
# Sets up subuid/subgid ranges and environment directories.
#
# WHAT IT DOES:
# 1. Creates podman user if needed
# 2. Configures subuid/subgid ranges for rootless containers
# 3. Creates environment directory with correct permissions
# 4. Enables user namespace delegation
#
# WHEN TO USE:
# - Setup new Podman user on server
# - Configure rootless Podman execution
# - Part of server preparation
#
# REFERENCE: See docs/ACTION_FILES_GUIDE.md for complete guide
# ============================================================================

name: 'infra: setup-podman-user'
description: 'Setup podman user, subuid/subgid ranges, and env directory'

# ============================================================================
# INPUTS - SSH connection and Podman user configuration
# ============================================================================
inputs:
  ssh_host:
    description: 'SSH host (IP or hostname). Required. Example: 192.168.1.100'
    required: true
  ssh_user:
    description: 'SSH username (non-root). Required. Used for authentication'
    required: true
  ssh_key:
    description: 'SSH private key for authentication. Required. Should be stored as GitHub secret'
    required: true
  root_ssh_key:
    description: 'SSH private key for root (optional). Use if ssh_user cannot escalate to root'
    required: false
  ssh_port:
    description: 'SSH port. Default: 22. Change if using non-standard SSH port'
    required: false
    default: '22'
  ssh_fingerprint:
    description: 'Server SSH host key fingerprint for verification. Optional but recommended'
    required: false
  podman_user:
    description: 'User on remote host to create/configure'
    required: false
    default: 'deployer'
  connect_mode:
    description: "How to connect: 'auto' (default), 'root', or 'user'"
    required: false
    default: 'auto'
  skip_upload:
    description: 'Skip staging/upload (assumes scripts deployed via deploy-server-scripts)'
    required: false
    default: 'true'
  create_podman_user:
    description: 'Create user if it does not exist. Default: false. Set true to auto-create'
    required: false
    default: 'false'
  env_dir_path:
    description: 'Environment directory path. Default: /var/deployments/development/deployer. Example: /opt/apps'
    required: false
    default: '/var/deployments/development/deployer'

runs:
  using: 'composite'
  steps:
    # Probe: Check SSH reachability to avoid scp timeouts
    - name: Check SSH reachability
      id: reach
      shell: bash
      env:
        SSH_HOST: ${{ inputs.ssh_host }}
        SSH_USER: ${{ inputs.ssh_user }}
        SSH_KEY: ${{ inputs.ssh_key }}
        SSH_PORT: ${{ inputs.ssh_port }}
      run: |
        set -euo pipefail
        KEY_FILE="$(mktemp)"
        trap "rm -f '$KEY_FILE'" EXIT
        if printf '%s' "$SSH_KEY" | grep -q '\\n'; then
          printf '%s\n' "$SSH_KEY" | sed 's/\\n/\n/g' > "$KEY_FILE"
        else
          printf '%s\n' "$SSH_KEY" > "$KEY_FILE"
        fi
        chmod 600 "$KEY_FILE"
        if ssh -i "$KEY_FILE" -o BatchMode=yes -o StrictHostKeyChecking=no -o ConnectTimeout=8 -p "${SSH_PORT:-22}" "$SSH_USER@$SSH_HOST" true 2>/dev/null; then
          echo "reachable=true" >> "$GITHUB_OUTPUT"
        else
          echo "reachable=false" >> "$GITHUB_OUTPUT"
        fi
    # Stage: Copy script from action path to workspace (needed for scp)
    - name: Stage setup-podman-user script
      if: ${{ steps.reach.outputs.reachable == 'true' && inputs.skip_upload != 'true' }}
      shell: bash
      env:
        ACTION_PATH: ${{ github.action_path }}
        WORKSPACE: ${{ github.workspace }}
      run: |
        set -euo pipefail
        mkdir -p "$WORKSPACE/.uactions_cache"
        cp "$ACTION_PATH/../../scripts/infra/setup-podman-user.sh" "$WORKSPACE/.uactions_cache/setup-podman-user.sh"

    # Upload: Transfer script to remote /tmp via scp
    - name: Upload setup-podman-user script
      if: ${{ steps.reach.outputs.reachable == 'true' && inputs.skip_upload != 'true' }}
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_user }}
        key: ${{ inputs.ssh_key }}
        port: ${{ inputs.ssh_port }}
        source: ".uactions_cache/setup-podman-user.sh"
        target: "/tmp"
        overwrite: true
        timeout: 15s
        command_timeout: 30s

    # Execute: Move to /opt/uactions/scripts/, chmod, export env, run
    - name: Execute setup-podman-user
      if: ${{ steps.reach.outputs.reachable == 'true' }}
      uses: ./.github/actions/podman/remote-podman-exec
      with:
        ssh_host: ${{ inputs.ssh_host }}
        ssh_user: ${{ inputs.ssh_user }}
        ssh_key: ${{ inputs.ssh_key }}
        root_ssh_key: ${{ inputs.root_ssh_key }}
        ssh_port: ${{ inputs.ssh_port }}
        ssh_fingerprint: ${{ inputs.ssh_fingerprint }}
        podman_user: ${{ inputs.podman_user }}
        connect_mode: ${{ inputs.connect_mode }}
        source_env: 'false'
        fail_if_env_missing: 'false'
        inline_script: |
          set -euo pipefail
          # Move script from /tmp to /opt/uactions/scripts/
          sudo mkdir -p /opt/uactions/scripts/infra
          if [ -f /tmp/setup-podman-user.sh ]; then
            sudo mv -f /tmp/setup-podman-user.sh /opt/uactions/scripts/infra/setup-podman-user.sh
          fi
          sudo chmod +x /opt/uactions/scripts/infra/setup-podman-user.sh
          
          # Export env vars for script
          export PODMAN_USER='${{ inputs.podman_user }}'
          
          # Execute server-managed script
          /opt/uactions/scripts/infra/setup-podman-user.sh

          # Create env directory and set permissions
          mkdir -p "${{ inputs.env_dir_path }}"
          chown -R "${{ inputs.podman_user }}":"${{ inputs.podman_user }}" "${{ inputs.env_dir_path }}" || true

          # Show podman version
          podman --version || true
