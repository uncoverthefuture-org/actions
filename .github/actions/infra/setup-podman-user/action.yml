# ============================================================================
# ACTION: Setup Podman User
# ============================================================================
# PURPOSE:
# Configures a user for rootless Podman container execution.
# Sets up subuid/subgid ranges and environment directories.
#
# WHAT IT DOES:
# 1. Creates podman user if needed
# 2. Configures subuid/subgid ranges for rootless containers
# 3. Creates environment directory with correct permissions
# 4. Enables user namespace delegation
#
# WHEN TO USE:
# - Setup new Podman user on server
# - Configure rootless Podman execution
# - Part of server preparation
#
# REFERENCE: See docs/ACTION_FILES_GUIDE.md for complete guide
# ============================================================================

name: 'infra: setup-podman-user'
description: 'Setup podman user, subuid/subgid ranges, and env directory'

# ============================================================================
# INPUTS - SSH connection and Podman user configuration
# ============================================================================
inputs:
  ssh_host:
    description: 'SSH host (IP or hostname). Required. Example: 192.168.1.100'
    required: true
  ssh_user:
    description: 'SSH username (non-root). Required. Used for authentication'
    required: true
  ssh_key:
    description: 'SSH private key for authentication. Required. Should be stored as GitHub secret'
    required: true
  root_ssh_key:
    description: 'SSH private key for root (optional). Use if ssh_user cannot escalate to root'
    required: false
  ssh_port:
    description: 'SSH port. Default: 22. Change if using non-standard SSH port'
    required: false
    default: '22'
  ssh_fingerprint:
    description: 'Server SSH host key fingerprint for verification. Optional but recommended'
    required: false
  podman_user:
    description: 'User to setup for Podman. Default: deployer. Example: appuser'
    required: false
    default: 'deployer'
  connect_mode:
    description: "Connection mode: 'auto' (default), 'root', or 'user'. See docs/ARCHITECTURE.md"
    required: false
    default: 'auto'
  create_podman_user:
    description: 'Create user if it does not exist. Default: false. Set true to auto-create'
    required: false
    default: 'false'
  env_dir_path:
    description: 'Environment directory path. Default: /var/deployments/development/deployer. Example: /opt/apps'
    required: false
    default: '/var/deployments/development/deployer'

runs:
  using: 'composite'
  steps:
    - name: Setup Podman User
      uses: ./.github/actions/podman/remote-podman-exec
      with:
        ssh_host: ${{ inputs.ssh_host }}
        ssh_user: ${{ inputs.ssh_user }}
        ssh_key: ${{ inputs.ssh_key }}
        root_ssh_key: ${{ inputs.root_ssh_key }}
        ssh_port: ${{ inputs.ssh_port }}
        ssh_fingerprint: ${{ inputs.ssh_fingerprint }}
        podman_user: ${{ inputs.podman_user }}
        connect_mode: ${{ inputs.connect_mode }}
        source_env: 'false'
        fail_if_env_missing: 'false'
        inline_script: |
          set -euo pipefail
          if id -u "${{ inputs.podman_user }}" >/dev/null 2>&1; then
            echo "User ${{ inputs.podman_user }} exists"
          else
            if [ '${{ inputs.create_podman_user }}' = 'true' ]; then
              useradd -m -s /usr/sbin/nologin "${{ inputs.podman_user }}" || adduser --disabled-password --gecos "" "${{ inputs.podman_user }}"
            else
              echo "Warning: podman_user ${{ inputs.podman_user }} does not exist and create_podman_user=false" >&2
            fi
          fi

          # Ensure subuid/subgid ranges for rootless podman
          if ! grep -q "^${{ inputs.podman_user }}:" /etc/subuid 2>/dev/null; then
            echo "${{ inputs.podman_user }}:100000:65536" >> /etc/subuid || true
          fi
          if ! grep -q "^${{ inputs.podman_user }}:" /etc/subgid 2>/dev/null; then
            echo "${{ inputs.podman_user }}:100000:65536" >> /etc/subgid || true
          fi

          # Create env directory and set permissions
          mkdir -p "${{ inputs.env_dir_path }}"
          chown -R "${{ inputs.podman_user }}":"${{ inputs.podman_user }}" "${{ inputs.env_dir_path }}" || true

          # Show podman version
          podman --version || true
