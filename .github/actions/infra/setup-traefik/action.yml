name: 'infra: setup-traefik'
description: 'Install Traefik reverse proxy with automatic Let''s Encrypt certificates via Podman.'

inputs:
  ssh_host:
    description: 'Remote host to connect to'
    required: true
  ssh_user:
    description: 'SSH username'
    required: true
  ssh_key:
    description: 'SSH private key for ssh_user'
    required: true
  root_ssh_key:
    description: 'Optional SSH key for root (used when switching users)'
    required: false
  ssh_port:
    description: 'SSH port'
    required: false
    default: '22'
  ssh_fingerprint:
    description: 'Optional server fingerprint verification'
    required: false
  podman_user:
    description: 'Podman user on target host'
    required: false
    default: 'deployer'
  connect_mode:
    description: "Connection mode: auto | root | user"
    required: false
    default: 'auto'
  traefik_email:
    description: "Email used for Let's Encrypt certificates"
    required: true
  traefik_version:
    description: 'Traefik image tag'
    required: false
    default: 'v3.1'

runs:
  using: 'composite'
  steps:
    - name: Prepare Traefik configuration
      uses: ./.github/actions/podman/remote-podman-exec
      with:
        ssh_host: ${{ inputs.ssh_host }}
        ssh_user: ${{ inputs.ssh_user }}
        ssh_key: ${{ inputs.ssh_key }}
        root_ssh_key: ${{ inputs.root_ssh_key }}
        ssh_port: ${{ inputs.ssh_port }}
        ssh_fingerprint: ${{ inputs.ssh_fingerprint }}
        podman_user: ${{ inputs.podman_user }}
        connect_mode: ${{ inputs.connect_mode }}
        inline_script: |
          set -euo pipefail

          # Stop legacy reverse proxies to free ports 80/443
          sudo systemctl stop apache2 nginx || true
          sudo systemctl disable apache2 nginx || true

          sudo mkdir -p /etc/traefik
          sudo mkdir -p /var/lib/traefik

          cat <<'EOF_TRAEFIK' | sudo tee /etc/traefik/traefik.yml >/dev/null
          entryPoints:
            web:
              address: ":80"
            websecure:
              address: ":443"

          providers:
            docker:
              # Inside container we'll mount the host podman socket at /var/run/docker.sock
              endpoint: "unix:///var/run/docker.sock"
              exposedByDefault: false

          certificatesResolvers:
            letsencrypt:
              acme:
                email: "${{ inputs.traefik_email }}"
                storage: /letsencrypt/acme.json
                httpChallenge:
                  entryPoint: web
          EOF_TRAEFIK

          sudo touch /var/lib/traefik/acme.json
          sudo chmod 600 /var/lib/traefik/acme.json

    - name: Run Traefik container
      uses: ./.github/actions/podman/remote-podman-exec
      with:
        ssh_host: ${{ inputs.ssh_host }}
        ssh_user: ${{ inputs.ssh_user }}
        ssh_key: ${{ inputs.ssh_key }}
        root_ssh_key: ${{ inputs.root_ssh_key }}
        ssh_port: ${{ inputs.ssh_port }}
        ssh_fingerprint: ${{ inputs.ssh_fingerprint }}
        podman_user: ${{ inputs.podman_user }}
        connect_mode: root
        inline_script: |
          set -euo pipefail

          # Ensure legacy proxies are not competing for 80/443
          systemctl stop apache2 nginx || true
          systemctl disable apache2 nginx || true

          # Determine the Podman socket to mount. Prefer the rootless socket of the podman_user
          PUSER='${{ inputs.podman_user }}'
          PUID=$(id -u "$PUSER" 2>/dev/null || echo 1000)
          # Ensure the user's Podman API socket is running so Traefik can discover rootless containers
          loginctl enable-linger "$PUSER" || true
          runuser -l "$PUSER" -c "XDG_RUNTIME_DIR=/run/user/$PUID systemctl --user enable --now podman.socket" || true
          USER_RUNTIME_DIR="/run/user/$PUID"
          SOCK_USER="$USER_RUNTIME_DIR/podman/podman.sock"
          SOCK_ROOT="/var/run/podman/podman.sock"
          if [ -S "$SOCK_USER" ]; then
            HOST_SOCK="$SOCK_USER"
          else
            HOST_SOCK="$SOCK_ROOT"
          fi

          # Restart Traefik
          podman container exists traefik >/dev/null 2>&1 && podman stop traefik >/dev/null 2>&1 || true
          podman container exists traefik >/dev/null 2>&1 && podman rm traefik >/dev/null 2>&1 || true

          podman run -d \
            --name traefik \
            --restart unless-stopped \
            -p 80:80 \
            -p 443:443 \
            -v /etc/traefik/traefik.yml:/etc/traefik/traefik.yml:ro \
            -v /var/lib/traefik/acme.json:/letsencrypt/acme.json \
            -v "$HOST_SOCK":/var/run/docker.sock \
            traefik:${{ inputs.traefik_version }}

          podman ps --filter name=traefik

    - name: Traefik status summary
      shell: bash
      env:
        SSH_HOST: ${{ inputs.ssh_host }}
        SSH_USER: ${{ inputs.ssh_user }}
        SSH_KEY: ${{ inputs.ssh_key }}
        SSH_PORT: ${{ inputs.ssh_port }}
      run: |
        set -euo pipefail
        KEY_FILE="$(mktemp)"
        printf '%s\n' "$SSH_KEY" > "$KEY_FILE"
        chmod 600 "$KEY_FILE"

        run_remote() {
          ssh -i "$KEY_FILE" -o StrictHostKeyChecking=no -p "${SSH_PORT:-22}" "$SSH_USER@$SSH_HOST" "$@"
        }

        TRAEFIK_PS="$(run_remote 'sudo podman ps --filter name=traefik --format "{{.ID}}\t{{.Status}}\t{{.Names}}\t{{.Ports}}" || true')"
        APACHE_STATE="$(run_remote 'systemctl is-active apache2 || true')"
        NGINX_STATE="$(run_remote 'systemctl is-active nginx || true')"
        PORTS_LISTEN="$(run_remote 'ss -ltnp | egrep ":80|:443" || true')"
        TRAEFIK_LOGS="$(run_remote 'sudo podman logs traefik --tail=80 2>/dev/null | tail -n 80 || true')"

        {
          echo '# Traefik Setup Summary'
          echo
          echo '## Container'
          echo
          echo '```'
          if [ -n "$TRAEFIK_PS" ]; then echo "$TRAEFIK_PS"; else echo '<not running>'; fi
          echo '```'
          echo
          echo '## Ports (80/443 listeners)'
          echo
          echo '```'
          if [ -n "$PORTS_LISTEN" ]; then echo "$PORTS_LISTEN"; else echo '<no listeners>'; fi
          echo '```'
          echo
          echo '## Apache/Nginx status'
          echo
          echo "- Apache: ${APACHE_STATE:-unknown}"
          echo "- Nginx: ${NGINX_STATE:-unknown}"
          echo
          echo '## Recent Traefik logs'
          echo
          echo '```'
          if [ -n "$TRAEFIK_LOGS" ]; then echo "$TRAEFIK_LOGS"; else echo '<no logs>'; fi
          echo '```'
        } >> "$GITHUB_STEP_SUMMARY"

        rm -f "$KEY_FILE"
