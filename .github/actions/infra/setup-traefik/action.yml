name: 'infra: setup-traefik'
description: 'Installs and manages Traefik reverse proxy on remote host for automatic HTTPS. Traefik terminates HTTP/S on ports 80/443, so downstream app deployments must avoid publishing host ports when Traefik is enabled—the container scripts emit labels only and skip `-p` mappings in that mode. Let''s Encrypt certificates via Podman.'

inputs:
  ssh_host:
    description: 'Remote host to connect to'
    required: true
  ssh_user:
    description: 'SSH username'
    required: true
  ssh_key:
    description: 'SSH private key for ssh_user'
    required: true
  ssh_port:
    description: 'SSH port'
    required: false
    default: '22'
  ssh_fingerprint:
    description: 'Optional server fingerprint verification'
    required: false
  traefik_email:
    description: "Email used for Let's Encrypt certificates"
    required: true
  traefik_version:
    description: 'Traefik image tag'
    required: false
    default: 'v3.5.4'
  enable_dashboard:
    description: 'Expose Traefik dashboard on port 8080 (requires basic auth hash)'
    required: false
    default: 'false'
  dashboard_user:
    description: 'Basic auth username for Traefik dashboard (required if dashboard enabled)'
    required: false
    default: ''
  dashboard_password_bcrypt:
    description: 'Bcrypt hash (htpasswd -nB) for Traefik dashboard user (required if dashboard enabled)'
    required: false
    default: ''
  skip_upload:
    description: 'Skip uploading per-script file (assumes scripts are already deployed via deploy-server-scripts)'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Check SSH reachability
      id: reach
      shell: bash
      env:
        SSH_HOST: ${{ inputs.ssh_host }}
        SSH_USER: ${{ inputs.ssh_user }}
        SSH_KEY: ${{ inputs.ssh_key }}
        SSH_PORT: ${{ inputs.ssh_port }}
      run: |
        set -euo pipefail
        KEY_FILE="$(mktemp)"
        trap "rm -f '$KEY_FILE'" EXIT
        if printf '%s' "$SSH_KEY" | grep -q '\\n'; then
          printf '%s\n' "$SSH_KEY" | sed 's/\\n/\n/g' > "$KEY_FILE"
        else
          printf '%s\n' "$SSH_KEY" > "$KEY_FILE"
        fi
        chmod 600 "$KEY_FILE"
        if ssh -i "$KEY_FILE" -o BatchMode=yes -o StrictHostKeyChecking=no -o ConnectTimeout=8 -p "${SSH_PORT:-22}" "$SSH_USER@$SSH_HOST" true 2>/dev/null; then
          echo "reachable=true" >> "$GITHUB_OUTPUT"
        else
          echo "reachable=false" >> "$GITHUB_OUTPUT"
        fi
    - name: Stage Traefik script for upload
      if: ${{ steps.reach.outputs.reachable == 'true' && inputs.skip_upload == 'false' }}
      shell: bash
      env:
        ACTION_PATH: ${{ github.action_path }}
        WORKSPACE: ${{ github.workspace }}
      run: |
        set -euo pipefail
        mkdir -p ${{ runner.temp }}/scripts/traefik
        cp ./.github/actions/scripts/traefik/install-traefik.sh ${{ runner.temp }}/scripts/traefik/

    - name: Stage setup-traefik script for upload
      if: ${{ steps.reach.outputs.reachable == 'true' && inputs.skip_upload == 'false' }}
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p ${{ runner.temp }}/scripts/traefik
        cp ./.github/actions/scripts/traefik/setup-traefik.sh ${{ runner.temp }}/scripts/traefik/

    - name: Stage ensure-traefik-config script for upload
      if: ${{ steps.reach.outputs.reachable == 'true' && inputs.skip_upload == 'false' }}
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p ${{ runner.temp }}/scripts/traefik
        cp ./.github/actions/scripts/traefik/ensure-traefik-config.sh ${{ runner.temp }}/scripts/traefik/

    - name: Upload Traefik scripts
      if: ${{ steps.reach.outputs.reachable == 'true' && inputs.skip_upload == 'false' }}
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_user }}
        key: ${{ inputs.ssh_key }}
        port: ${{ inputs.ssh_port }}
        source: ${{ runner.temp }}/scripts/traefik/install-traefik.sh,${{ runner.temp }}/scripts/traefik/setup-traefik.sh,${{ runner.temp }}/scripts/traefik/ensure-traefik-config.sh
        target: /tmp
        overwrite: true
        timeout: 15s
        command_timeout: 30s

    - name: Run Traefik script
      if: ${{ steps.reach.outputs.reachable == 'true' }}
      uses: ./.github/actions/podman/remote-podman-exec
      with:
        ssh_host: ${{ inputs.ssh_host }}
        ssh_user: ${{ inputs.ssh_user }}
        ssh_key: ${{ inputs.ssh_key }}
        ssh_port: ${{ inputs.ssh_port }}
        ssh_fingerprint: ${{ inputs.ssh_fingerprint }}
        connect_mode: user
        inline_script: |
          set -euo pipefail
          # Ensure final scripts directory and move uploaded script into place
          mkdir -p /opt/uactions/scripts/traefik
          if [ -f /tmp/install-traefik.sh ]; then
            mv -f /tmp/install-traefik.sh /opt/uactions/scripts/traefik/install-traefik.sh
            chmod +x /opt/uactions/scripts/traefik/install-traefik.sh
          fi
          if [ -f /tmp/setup-traefik.sh ]; then
            mv -f /tmp/setup-traefik.sh /opt/uactions/scripts/traefik/setup-traefik.sh
            chmod +x /opt/uactions/scripts/traefik/setup-traefik.sh
          fi
          if [ -f /tmp/ensure-traefik-config.sh ]; then
            mv -f /tmp/ensure-traefik-config.sh /opt/uactions/scripts/traefik/ensure-traefik-config.sh
            chmod +x /opt/uactions/scripts/traefik/ensure-traefik-config.sh
          fi

          CURRENT_USER="$(id -un)"
          echo "🔎 Remote session user: $CURRENT_USER"

          export TRAEFIK_EMAIL='${{ inputs.traefik_email }}'

          if [ "$CURRENT_USER" = "root" ]; then
            echo "🔧 Running Traefik system installation (requires root) ..."
            /opt/uactions/scripts/traefik/install-traefik.sh
          else
            echo "::notice::Skipping install-traefik.sh because it requires root privileges."
            echo "::notice::Run install-traefik.sh manually as a privileged user to complete system setup."
          fi

          echo "🚀 Running Traefik container setup as current user ..."
          export TRAEFIK_VERSION='${{ inputs.traefik_version }}'
          export TRAEFIK_DASHBOARD='${{ inputs.enable_dashboard }}'
          export DASHBOARD_USER='${{ inputs.dashboard_user }}'
          export DASHBOARD_PASS_BCRYPT='${{ inputs.dashboard_password_bcrypt }}'
          /opt/uactions/scripts/traefik/setup-traefik.sh

    - name: Traefik status summary
      if: always()
      shell: bash
      env:
        SSH_HOST: ${{ inputs.ssh_host }}
        SSH_USER: ${{ inputs.ssh_user }}
        SSH_KEY: ${{ inputs.ssh_key }}
        SSH_PORT: ${{ inputs.ssh_port }}
        REACHABLE: ${{ steps.reach.outputs.reachable }}
      run: |
        set -euo pipefail
        
        # Create temporary SSH key file
        KEY_FILE="$(mktemp)"
        trap "rm -f '$KEY_FILE'" EXIT
        
        # Handle newline-escaped SSH keys (convert \n to actual newlines)
        if printf '%s' "$SSH_KEY" | grep -q '\\n'; then
          printf '%s\n' "$SSH_KEY" | sed 's/\\n/\n/g' > "$KEY_FILE"
        else
          printf '%s\n' "$SSH_KEY" > "$KEY_FILE"
        fi
        chmod 600 "$KEY_FILE"

        # SSH remote execution helper
        run_remote() {
          ssh -i "$KEY_FILE" -o StrictHostKeyChecking=no -o ConnectTimeout=10 -p "${SSH_PORT:-22}" "$SSH_USER@$SSH_HOST" "$@" 2>/dev/null || echo "SSH_FAILED"
        }

        # Connectivity section
        cat >> "$GITHUB_STEP_SUMMARY" << 'SUMMARY_EOF'
        ### 🌐 Connectivity
        SUMMARY_EOF
        if [ "${REACHABLE:-false}" = "true" ]; then
          echo "Host reachable" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "Host NOT reachable (skipped Traefik setup steps)" >> "$GITHUB_STEP_SUMMARY"
        fi

        # Fetch Traefik container status
        TRAEFIK_PS_RAW="$(run_remote 'command -v podman >/dev/null 2>&1 && podman ps --filter name=traefik --format "{{.ID}}|{{.Status}}|{{.Names}}|{{.Ports}}" || echo "podman not available"' || true)"
        TRAEFIK_PS="$(printf 'ID\tSTATUS\tNAME\tPORTS\n%s\n' "$TRAEFIK_PS_RAW")"
        
        # Fetch Traefik container stats (CPU, memory, I/O)
        TRAEFIK_STATS="$(run_remote 'command -v podman >/dev/null 2>&1 && podman stats traefik --no-stream --format "table {{.Container}}	{{.CPUPerc}}	{{.MemUsage}}" || echo "stats unavailable"' || true)"
        
        # Fetch recent Traefik logs (last 50 lines)
        TRAEFIK_LOGS="$(run_remote 'command -v podman >/dev/null 2>&1 && podman logs traefik --tail=50 || echo "logs unavailable"' || true)"
        
        # Fetch port listeners on 80/443
        PORTS_LISTEN="$(run_remote 'ss -ltnp 2>/dev/null | grep -E ":80|:443" || echo "no listeners"' || true)"
        
        # Fetch legacy proxy status
        APACHE_STATE="$(run_remote 'systemctl is-active apache2 2>/dev/null || echo "inactive"' || true)"
        NGINX_STATE="$(run_remote 'systemctl is-active nginx 2>/dev/null || echo "inactive"' || true)"

        # Generate GitHub step summary with formatted output
        cat >> "$GITHUB_STEP_SUMMARY" << 'SUMMARY_EOF'
        ### 🚀 Traefik Setup Summary
        
        #### ✅ Container Status
        
        ```
        SUMMARY_EOF
        
        if [ "$TRAEFIK_PS_RAW" = "SSH_FAILED" ]; then
          echo "⚠️  Container status unavailable (SSH timeout or podman not available)" >> "$GITHUB_STEP_SUMMARY"
        elif [ "$TRAEFIK_PS_RAW" = "podman not available" ]; then
          echo "⚠️  podman not available on host" >> "$GITHUB_STEP_SUMMARY"
        elif [ -z "$TRAEFIK_PS_RAW" ]; then
          echo "⚠️  Traefik container not running" >> "$GITHUB_STEP_SUMMARY"
          TRAEFIK_NOT_RUNNING=true
        else
          echo "$TRAEFIK_PS" >> "$GITHUB_STEP_SUMMARY"
        fi
        
        cat >> "$GITHUB_STEP_SUMMARY" << 'SUMMARY_EOF'
        ```
        
        #### 📊 Container Resource Usage
        
        ```
        SUMMARY_EOF
        
        if [ -n "$TRAEFIK_STATS" ] && [ "$TRAEFIK_STATS" != "SSH_FAILED" ]; then 
          echo "$TRAEFIK_STATS" >> "$GITHUB_STEP_SUMMARY"
        else 
          echo "⚠️  Stats unavailable" >> "$GITHUB_STEP_SUMMARY"
        fi
        
        cat >> "$GITHUB_STEP_SUMMARY" << 'SUMMARY_EOF'
        ```
        
        #### 🔌 Network Ports (80/443)
        
        ```
        SUMMARY_EOF
        
        if [ "$PORTS_LISTEN" = "SSH_FAILED" ]; then
          echo "⚠️  Unable to verify port listeners (SSH timeout)" >> "$GITHUB_STEP_SUMMARY"
        elif [ "$PORTS_LISTEN" = "no listeners" ]; then
          echo "⚠️  No listeners on 80/443" >> "$GITHUB_STEP_SUMMARY"
          TRAEFIK_NO_PORTS=true
        else 
          echo "$PORTS_LISTEN" >> "$GITHUB_STEP_SUMMARY"
        fi
        
        cat >> "$GITHUB_STEP_SUMMARY" << 'SUMMARY_EOF'
        ```
        
        #### 🛑 Legacy Proxies (Apache/Nginx)
        
        | Service | Status |
        |---------|--------|
        SUMMARY_EOF
        
        APACHE_DISPLAY="${APACHE_STATE:-unknown}"
        NGINX_DISPLAY="${NGINX_STATE:-unknown}"
        [ "$APACHE_STATE" = "SSH_FAILED" ] && APACHE_DISPLAY="SSH timeout"
        [ "$NGINX_STATE" = "SSH_FAILED" ] && NGINX_DISPLAY="SSH timeout"
        
        echo "| Apache  | \`$APACHE_DISPLAY\` |" >> "$GITHUB_STEP_SUMMARY"
        echo "| Nginx   | \`$NGINX_DISPLAY\` |" >> "$GITHUB_STEP_SUMMARY"
        
        cat >> "$GITHUB_STEP_SUMMARY" << 'SUMMARY_EOF'
        
        #### 📋 Recent Traefik Logs (Last 50 lines)
        
        ```log
        SUMMARY_EOF
        
        if [ -n "$TRAEFIK_LOGS" ] && [ "$TRAEFIK_LOGS" != "SSH_FAILED" ]; then 
          echo "$TRAEFIK_LOGS" | head -50 >> "$GITHUB_STEP_SUMMARY"
        else 
          echo "⚠️  Logs unavailable" >> "$GITHUB_STEP_SUMMARY"
        fi
        
        cat >> "$GITHUB_STEP_SUMMARY" << 'SUMMARY_EOF'
        ```
        
        ---
        **Generated at:** `$(date -u +'%Y-%m-%d %H:%M:%S UTC')`
        SUMMARY_EOF

        if [ "${TRAEFIK_NOT_RUNNING:-false}" = "true" ]; then
          echo '::error::Traefik container is not running after setup.'
          exit 1
        fi

        if [ "${TRAEFIK_NO_PORTS:-false}" = "true" ]; then
          echo '::error::Traefik is not listening on ports 80/443. Review CAP_NET_BIND_SERVICE or authbind configuration.'
          exit 1
        fi
