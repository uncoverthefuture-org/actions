name: 'infra: setup-traefik'
description: 'Install Traefik reverse proxy with automatic Let''s Encrypt certificates via Podman.'

inputs:
  ssh_host:
    description: 'Remote host to connect to'
    required: true
  ssh_user:
    description: 'SSH username'
    required: true
  ssh_key:
    description: 'SSH private key for ssh_user'
    required: true
  root_ssh_key:
    description: 'Optional SSH key for root (used when switching users)'
    required: false
  ssh_port:
    description: 'SSH port'
    required: false
    default: '22'
  ssh_fingerprint:
    description: 'Optional server fingerprint verification'
    required: false
  podman_user:
    description: 'Podman user on target host'
    required: false
    default: 'deployer'
  connect_mode:
    description: "Connection mode: auto | root | user"
    required: false
    default: 'auto'
  traefik_email:
    description: "Email used for Let's Encrypt certificates"
    required: true
  traefik_version:
    description: 'Traefik image tag'
    required: false
    default: 'v3.1'

runs:
  using: 'composite'
  steps:
    - name: Prepare Traefik configuration
      uses: ./.github/actions/podman/remote-podman-exec
      with:
        ssh_host: ${{ inputs.ssh_host }}
        ssh_user: ${{ inputs.ssh_user }}
        ssh_key: ${{ inputs.ssh_key }}
        root_ssh_key: ${{ inputs.root_ssh_key }}
        ssh_port: ${{ inputs.ssh_port }}
        ssh_fingerprint: ${{ inputs.ssh_fingerprint }}
        podman_user: ${{ inputs.podman_user }}
        connect_mode: ${{ inputs.connect_mode }}
        inline_script: |
          set -euo pipefail

          # Stop legacy reverse proxies to free ports 80/443
          sudo systemctl stop apache2 nginx >/dev/null 2>&1 || true
          sudo systemctl disable apache2 nginx >/dev/null 2>&1 || true

          sudo mkdir -p /etc/traefik
          sudo mkdir -p /var/lib/traefik

          cat <<'EOF_TRAEFIK' | sudo tee /etc/traefik/traefik.yml >/dev/null
          entryPoints:
            web:
              address: ":80"
            websecure:
              address: ":443"

          providers:
            docker:
              # Inside container we'll mount the host podman socket at /var/run/docker.sock
              endpoint: "unix:///var/run/docker.sock"
              exposedByDefault: false

          certificatesResolvers:
            letsencrypt:
              acme:
                email: "${{ inputs.traefik_email }}"
                storage: /letsencrypt/acme.json
                httpChallenge:
                  entryPoint: web
          EOF_TRAEFIK

          sudo touch /var/lib/traefik/acme.json
          sudo chmod 600 /var/lib/traefik/acme.json

    - name: Run Traefik container
      uses: ./.github/actions/podman/remote-podman-exec
      with:
        ssh_host: ${{ inputs.ssh_host }}
        ssh_user: ${{ inputs.ssh_user }}
        ssh_key: ${{ inputs.ssh_key }}
        root_ssh_key: ${{ inputs.root_ssh_key }}
        ssh_port: ${{ inputs.ssh_port }}
        ssh_fingerprint: ${{ inputs.ssh_fingerprint }}
        podman_user: ${{ inputs.podman_user }}
        connect_mode: root
        inline_script: |
          set -euo pipefail

          # Ensure legacy proxies are not competing for 80/443
          systemctl stop apache2 nginx >/dev/null 2>&1 || true
          systemctl disable apache2 nginx >/dev/null 2>&1 || true

          # Determine the Podman socket to mount. Prefer the rootless socket of the podman_user
          PUSER='${{ inputs.podman_user }}'
          PUID=$(id -u "$PUSER" 2>/dev/null || echo 1000)
          # Ensure the user's Podman API socket is running so Traefik can discover rootless containers
          loginctl enable-linger "$PUSER" || true
          runuser -l "$PUSER" -c "XDG_RUNTIME_DIR=/run/user/$PUID systemctl --user enable --now podman.socket" || true
          USER_RUNTIME_DIR="/run/user/$PUID"
          SOCK_USER="$USER_RUNTIME_DIR/podman/podman.sock"
          SOCK_ROOT="/var/run/podman/podman.sock"
          if [ -S "$SOCK_USER" ]; then
            HOST_SOCK="$SOCK_USER"
          else
            HOST_SOCK="$SOCK_ROOT"
          fi

          # Restart Traefik
          podman container exists traefik >/dev/null 2>&1 && podman stop traefik >/dev/null 2>&1 || true
          podman container exists traefik >/dev/null 2>&1 && podman rm traefik >/dev/null 2>&1 || true

          if ! podman run -d \
            --name traefik \
            --restart unless-stopped \
            -p 80:80 \
            -p 443:443 \
            -v /etc/traefik/traefik.yml:/etc/traefik/traefik.yml:ro \
            -v /var/lib/traefik/acme.json:/letsencrypt/acme.json \
            -v "$HOST_SOCK":/var/run/docker.sock \
            docker.io/traefik:${{ inputs.traefik_version }}; then
            echo "::error::Failed to start Traefik container" >&2
            podman logs traefik 2>&1 || echo "No logs available"
            exit 1
          fi

          echo "✅ Traefik container started successfully"
          podman ps --filter name=traefik

    - name: Traefik status summary
      if: always()
      shell: bash
      env:
        SSH_HOST: ${{ inputs.ssh_host }}
        SSH_USER: ${{ inputs.ssh_user }}
        SSH_KEY: ${{ inputs.ssh_key }}
        SSH_PORT: ${{ inputs.ssh_port }}
      run: |
        set -euo pipefail
        
        # Create temporary SSH key file
        KEY_FILE="$(mktemp)"
        trap "rm -f '$KEY_FILE'" EXIT
        
        # Handle newline-escaped SSH keys (convert \n to actual newlines)
        if printf '%s' "$SSH_KEY" | grep -q '\\n'; then
          printf '%s\n' "$SSH_KEY" | sed 's/\\n/\n/g' > "$KEY_FILE"
        else
          printf '%s\n' "$SSH_KEY" > "$KEY_FILE"
        fi
        chmod 600 "$KEY_FILE"

        # SSH remote execution helper
        run_remote() {
          ssh -i "$KEY_FILE" -o StrictHostKeyChecking=no -o ConnectTimeout=10 -p "${SSH_PORT:-22}" "$SSH_USER@$SSH_HOST" "$@" 2>/dev/null || echo "SSH_FAILED"
        }

        # Fetch Traefik container status
        TRAEFIK_PS="$(run_remote 'command -v podman >/dev/null 2>&1 && sudo podman ps --filter name=traefik --format "table {{.ID}}\t{{.Status}}\t{{.Names}}\t{{.Ports}}" || echo "podman not available"' || true)"
        
        # Fetch Traefik container stats (CPU, memory, I/O)
        TRAEFIK_STATS="$(run_remote 'command -v podman >/dev/null 2>&1 && sudo podman stats traefik --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" || echo "stats unavailable"' || true)"
        
        # Fetch recent Traefik logs (last 50 lines)
        TRAEFIK_LOGS="$(run_remote 'command -v podman >/dev/null 2>&1 && sudo podman logs traefik --tail=50 || echo "logs unavailable"' || true)"
        
        # Fetch port listeners on 80/443
        PORTS_LISTEN="$(run_remote 'ss -ltnp 2>/dev/null | grep -E ":80|:443" || echo "no listeners"' || true)"
        
        # Fetch legacy proxy status
        APACHE_STATE="$(run_remote 'systemctl is-active apache2 2>/dev/null || echo "inactive"' || true)"
        NGINX_STATE="$(run_remote 'systemctl is-active nginx 2>/dev/null || echo "inactive"' || true)"

        # Generate GitHub step summary with formatted output
        cat >> "$GITHUB_STEP_SUMMARY" << 'SUMMARY_EOF'
        ### 🚀 Traefik Setup Summary
        
        #### ✅ Container Status
        
        ```
        SUMMARY_EOF
        
        if [ -n "$TRAEFIK_PS" ] && [ "$TRAEFIK_PS" != "SSH_FAILED" ]; then 
          echo "$TRAEFIK_PS" >> "$GITHUB_STEP_SUMMARY"
        else 
          echo "⚠️  Container status unavailable (SSH timeout or podman not available)" >> "$GITHUB_STEP_SUMMARY"
        fi
        
        cat >> "$GITHUB_STEP_SUMMARY" << 'SUMMARY_EOF'
        ```
        
        #### 📊 Container Resource Usage
        
        ```
        SUMMARY_EOF
        
        if [ -n "$TRAEFIK_STATS" ] && [ "$TRAEFIK_STATS" != "SSH_FAILED" ]; then 
          echo "$TRAEFIK_STATS" >> "$GITHUB_STEP_SUMMARY"
        else 
          echo "⚠️  Stats unavailable" >> "$GITHUB_STEP_SUMMARY"
        fi
        
        cat >> "$GITHUB_STEP_SUMMARY" << 'SUMMARY_EOF'
        ```
        
        #### 🔌 Network Ports (80/443)
        
        ```
        SUMMARY_EOF
        
        if [ -n "$PORTS_LISTEN" ] && [ "$PORTS_LISTEN" != "SSH_FAILED" ]; then 
          echo "$PORTS_LISTEN" >> "$GITHUB_STEP_SUMMARY"
        else 
          echo "⚠️  No listeners on 80/443" >> "$GITHUB_STEP_SUMMARY"
        fi
        
        cat >> "$GITHUB_STEP_SUMMARY" << 'SUMMARY_EOF'
        ```
        
        #### 🛑 Legacy Proxies (Apache/Nginx)
        
        | Service | Status |
        |---------|--------|
        SUMMARY_EOF
        
        APACHE_DISPLAY="${APACHE_STATE:-unknown}"
        NGINX_DISPLAY="${NGINX_STATE:-unknown}"
        [ "$APACHE_STATE" = "SSH_FAILED" ] && APACHE_DISPLAY="SSH timeout"
        [ "$NGINX_STATE" = "SSH_FAILED" ] && NGINX_DISPLAY="SSH timeout"
        
        echo "| Apache  | \`$APACHE_DISPLAY\` |" >> "$GITHUB_STEP_SUMMARY"
        echo "| Nginx   | \`$NGINX_DISPLAY\` |" >> "$GITHUB_STEP_SUMMARY"
        
        cat >> "$GITHUB_STEP_SUMMARY" << 'SUMMARY_EOF'
        
        #### 📋 Recent Traefik Logs (Last 50 lines)
        
        ```log
        SUMMARY_EOF
        
        if [ -n "$TRAEFIK_LOGS" ] && [ "$TRAEFIK_LOGS" != "SSH_FAILED" ]; then 
          echo "$TRAEFIK_LOGS" | head -50 >> "$GITHUB_STEP_SUMMARY"
        else 
          echo "⚠️  Logs unavailable" >> "$GITHUB_STEP_SUMMARY"
        fi
        
        cat >> "$GITHUB_STEP_SUMMARY" << 'SUMMARY_EOF'
        ```
        
        ---
        **Generated at:** `$(date -u +'%Y-%m-%d %H:%M:%S UTC')`
        SUMMARY_EOF
