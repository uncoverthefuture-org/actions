#!/usr/bin/env bash
# ----------------------------------------------------------------------------
# run-env-setup.sh - Environment setup and file management runner
# ----------------------------------------------------------------------------
# Purpose:
#   Handles environment directory creation, file writing, and sourcing
#   for deployment operations. Replaces long inline scripts in GitHub Actions.
#
# Inputs (environment variables):
#   PODMAN_USER             - User for operations (default: deployer)
#   ENV_FILE_PATH           - Path to the .env file to write
#   ENV_B64                 - Base64 encoded environment content
#   ENV_CONTENT             - Raw environment content (alternative to ENV_B64)
#   GITHUB_REF_NAME         - GitHub ref name for env detection
#   GITHUB_REPOSITORY       - GitHub repository for app slug derivation
#
# Exit codes:
#   0 - Success
#   1 - Missing requirements or runtime error
# ----------------------------------------------------------------------------
set -euo pipefail

# --- Resolve inputs -----------------------------------------------------------------
# Get required environment variables with defaults
PODMAN_USER="${PODMAN_USER:-deployer}"
ENV_FILE_PATH="${ENV_FILE_PATH:-}"
ENV_B64="${ENV_B64:-}"
ENV_CONTENT="${ENV_CONTENT:-}"

# --- Environment Setup ---------------------------------------------------------------
echo "🔧 Setting up environment management..."

# Determine environment name from GitHub ref if not embedded in path
if [[ "$ENV_FILE_PATH" =~ /([^/]+)/([^/]+)/\.env$ ]]; then
  ENV_NAME="${BASH_REMATCH[1]}"
  APP_SLUG="${BASH_REMATCH[2]}"
else
  # Fallback to detecting from GitHub context
  REF_NAME="${GITHUB_REF_NAME:-}"
  case "$REF_NAME" in
    main|master|production) ENV_NAME='production' ;;
    stage|staging) ENV_NAME='staging' ;;
    dev|develop|development) ENV_NAME='development' ;;
    refs/tags/*) ENV_NAME='production' ;;
    *) ENV_NAME='development' ;;
  esac

  # Determine app slug from GitHub repository
  REPO_NAME_RAW="${GITHUB_REPOSITORY:-}"
  if [ -n "$REPO_NAME_RAW" ]; then
    REPO_NAME="${REPO_NAME_RAW##*/}"
  else
    REPO_NAME='app'
  fi
  APP_SLUG=$(printf '%s' "$REPO_NAME" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
fi

# Setup environment directories and files
ENV_ROOT="/var/deployments"
ENV_DIR="${ENV_ROOT}/${ENV_NAME}/${APP_SLUG}"

echo "📁 Creating environment directory: $ENV_DIR"
if ! mkdir -p "$ENV_DIR"; then
  echo "::error::Unable to create env directory $ENV_DIR" >&2
  exit 1
fi

# Use provided ENV_FILE_PATH or construct default
if [ -z "$ENV_FILE_PATH" ]; then
  ENV_FILE_PATH="${ENV_DIR}/.env"
fi

ENV_FILE="$ENV_FILE_PATH"

# Create env file if it doesn't exist
if [ ! -f "$ENV_FILE" ]; then
  echo "📄 Creating environment file: $ENV_FILE"
  {
    printf '# Generated by uactions package (run-env-setup.sh).\n'
    printf '# Populate with KEY=VALUE pairs required for your deployment.\n'
  } > "$ENV_FILE"
  chown "$PODMAN_USER:$PODMAN_USER" "$ENV_FILE" >/dev/null 2>&1 || true
  chmod 600 "$ENV_FILE" >/dev/null 2>&1 || true
else
  echo "📄 Environment file already exists: $ENV_FILE"
fi

# Export environment variables for scripts
export REMOTE_ENV_FILE="$ENV_FILE"
export REMOTE_ENV_DIR="$ENV_DIR"

# --- Podman Helper -------------------------------------------------------------------
echo "🐳 Setting up podman helper function..."
run_podman() {
  if [ "$(id -un)" = "$PODMAN_USER" ]; then
    podman "$@"
  else
    sudo -H -u "$PODMAN_USER" podman "$@"
  fi
}

# Verify podman is available
if ! command -v podman >/dev/null 2>&1; then
  echo '::error::podman is not installed on the remote host'
  echo 'Error: podman is not installed on the remote host.' >&2
  echo 'Hint: enable host preparation in the calling action (prepare_host: true) or install podman manually.' >&2
  exit 1
fi

# --- Script Staging ------------------------------------------------------------------
echo "📦 Staging environment scripts..."
cd /

# Ensure scripts directory exists
sudo mkdir -p /opt/uactions/scripts/app

# Move uploaded env script if it exists
if [ -f /tmp/write-env-file.sh ]; then
  echo "📋 Moving write-env-file.sh to /opt/uactions/scripts/app/"
  sudo mv -f /tmp/write-env-file.sh /opt/uactions/scripts/app/write-env-file.sh
  sudo chmod +x /opt/uactions/scripts/app/write-env-file.sh
fi

# --- Export Environment Variables -----------------------------------------------------
echo "📤 Exporting environment variables..."

# Environment file settings
export ENV_FILE_PATH
export ENV_B64
export ENV_CONTENT

# --- Execute Environment Setup -------------------------------------------------------
echo "🚀 Executing environment setup script..."
echo "  Script: /opt/uactions/scripts/app/write-env-file.sh"
echo "  Env file: $ENV_FILE_PATH"

/opt/uactions/scripts/app/write-env-file.sh

echo "✅ Environment setup completed successfully"
