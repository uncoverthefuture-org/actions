# ============================================================================
# ACTION: Prepare App Environment
# ============================================================================
# PURPOSE:
# Determines environment context, resolves environment-specific secrets,
# and prepares .env file for container builds.
#
# WHAT IT DOES:
# 1. Detects environment from branch or uses explicit override
# 2. Resolves environment-specific secret (e.g., PROD_ENV_B64)
# 3. Decodes base64 secret to .env file
# 4. Optionally exports variables to GitHub Actions
# 5. Returns environment metadata
#
# WHEN TO USE:
# - Prepare environment files for container builds
# - Resolve environment-specific secrets
# - Auto-detect environment from branch
# - Part of CI/CD pipeline
#
# REFERENCE: See docs/ACTION_FILES_GUIDE.md for complete guide
# ============================================================================

name: 'common: prepare-app-env'
description: 'Determines environment context, resolves the matching secret, and prepares an env file for container builds.'

# ============================================================================
# INPUTS - Environment detection and secret resolution
# ============================================================================
inputs:
  # ========================================================================
  # ENVIRONMENT OVERRIDES
  # ========================================================================
  env_name:
    description: 'Explicit environment name override. Example: production, staging, development. Bypasses auto-detection'
    required: false
  env_key:
    description: 'Explicit environment key override. Example: prod, staging, dev. Short form of env_name'
    required: false
  deploy_enabled:
    description: "Override deploy flag ('true' or 'false'). Controls whether deployment should proceed"
    required: false
  image_tag:
    description: 'Override image tag. Passed to environment detection script'
    required: false

  # ========================================================================
  # ENVIRONMENT DETECTION
  # ========================================================================
  environment_script:
    description: 'Script to source for environment detection. Default: .github/scripts/set-environment-context.sh'
    required: false
    default: '.github/scripts/set-environment-context.sh'
  fallback_env_name:
    description: 'Fallback environment name when branch detection fails. Default: dev'
    required: false
    default: 'dev'
  fallback_env_key:
    description: 'Fallback environment key when branch detection fails. Default: dev'
    required: false
    default: 'dev'
  fallback_deploy_enabled:
    description: "Fallback deploy flag when branch detection fails. Default: false ('true' or 'false')"
    required: false
    default: 'false'

  # ========================================================================
  # SECRET RESOLUTION
  # ========================================================================
  secret_prefix:
    description: "Secret name prefix. Final secret: <prefix><UPPERCASE env_key><suffix>. Example: '' results in PROD_ENV_B64"
    required: false
    default: ''
  secret_suffix:
    description: 'Secret name suffix. Default: _ENV_B64. Final secret: <prefix><UPPERCASE env_key><suffix>'
    required: false
    default: '_ENV_B64'
  secret_required:
    description: "Fail if secret is missing/empty. Default: true. Set 'false' to allow missing secrets"
    required: false
    default: 'true'

  # ========================================================================
  # ENV FILE OUTPUT
  # ========================================================================
  env_file:
    description: 'Output path for decoded .env file. Default: .env.production. Example: .env'
    required: false
    default: '.env.production'
  export_to_github_env:
    description: "Export variables to GitHub Actions. Default: false. Set 'true' to inherit in future steps"
    required: false
    default: 'true'

outputs:
  env_name:
    description: 'Resolved environment name'
    value: ${{ steps.context.outputs.env_name }}
  env_key:
    description: 'Resolved environment key'
    value: ${{ steps.context.outputs.env_key }}
  deploy_enabled:
    description: 'Resolved deploy flag'
    value: ${{ steps.context.outputs.deploy_enabled }}
  image_tag:
    description: 'Resolved image tag'
    value: ${{ steps.context.outputs.image_tag }}
  env_b64:
    description: 'Resolved base64-encoded secret value'
    value: ${{ steps.secret.outputs.env_b64 }}
  secret_name:
    description: 'Secret name that was inspected'
    value: ${{ steps.secret.outputs.secret_name }}
  secret_found:
    description: "'true' when the secret existed and was non-empty"
    value: ${{ steps.secret.outputs.found }}
  env_file:
    description: 'Absolute path to the decoded env file (empty when secret missing and not required)'
    value: ${{ steps.write.outputs.env_file }}

runs:
  using: 'composite'
  steps:
    - name: Ensure bundled actions
      uses: ./.github/actions/common/ensure-bundled-actions

    - name: Determine environment context
      id: context
      uses: ./.github/actions/common/determine-env-context
      with:
        env_name: ${{ inputs.env_name }}
        env_key: ${{ inputs.env_key }}
        deploy_enabled: ${{ inputs.deploy_enabled }}
        image_tag: ${{ inputs.image_tag }}
        environment_script: ${{ inputs.environment_script }}
        fallback_env_name: ${{ inputs.fallback_env_name }}
        fallback_env_key: ${{ inputs.fallback_env_key }}
        fallback_deploy_enabled: ${{ inputs.fallback_deploy_enabled }}

    - name: Resolve env secret
      id: secret
      uses: ./.github/actions/common/select-env-secret
      with:
        env_name: ${{ steps.context.outputs.env_key }}
        secret_prefix: ${{ inputs.secret_prefix }}
        secret_suffix: ${{ inputs.secret_suffix }}
        required: ${{ inputs.secret_required }}

    - name: Write env file
      id: write
      shell: bash
      env:
        SECRET_B64: ${{ steps.secret.outputs.env_b64 }}
        SECRET_FOUND: ${{ steps.secret.outputs.found }}
        REQUIRED: ${{ inputs.secret_required }}
        DEST_PATH: ${{ inputs.env_file }}
        EXPORT_TO_ENV: ${{ inputs.export_to_github_env }}
      run: |
        set -euo pipefail

        if [ -z "${SECRET_B64}" ]; then
          if [ "${REQUIRED}" = "true" ]; then
            echo "::error::Secret payload is empty but required" >&2
            exit 1
          fi
          printf 'env_file=\n' >>"$GITHUB_OUTPUT"
          exit 0
        fi

        dest="${DEST_PATH}"
        if [ -z "$dest" ]; then
          dest='.env.production'
        fi

        mkdir -p "$(dirname "$dest")"
        printf '%s' "${SECRET_B64}" | base64 --decode >"$dest"

        if [ "${EXPORT_TO_ENV}" = "true" ]; then
          # Append the decoded file so future steps inherit the variables
          cat "$dest" >>"$GITHUB_ENV"
        fi

        printf 'env_file=%s\n' "$(cd "$(dirname "$dest")" && pwd)/$(basename "$dest")" >>"$GITHUB_OUTPUT"
