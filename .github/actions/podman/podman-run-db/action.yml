name: 'Podman Run DB'
description: 'Runs a database container (PostgreSQL or MySQL) on a remote host via Podman with defaults and memory limit.'

inputs:
  ssh_host:
    description: 'SSH host'
    required: true
  ssh_user:
    description: 'SSH username (non-root)'
    required: true
  ssh_key:
    description: 'SSH private key for non-root user'
    required: true
  root_ssh_key:
    description: 'SSH private key for root (optional)'
    required: false
  ssh_port:
    description: 'SSH port'
    required: false
    default: '22'
  ssh_fingerprint:
    description: 'Server SSH host key fingerprint to verify host identity (optional but recommended)'
    required: false
  podman_user:
    description: 'User on remote host to execute podman commands as'
    required: false
    default: 'deployer'
  connect_mode:
    description: "How to connect: 'auto' (default), 'root', or 'user'"
    required: false
    default: 'auto'

  db_type:
    description: "Database type: 'postgres' or 'mysql'"
    required: false
    default: 'mysql'
  service_name:
    description: 'Container name for DB service'
    required: true
  db_name:
    description: 'Database name'
    required: true
  db_user:
    description: 'Database user'
    required: true
  db_password:
    description: 'Database user password'
    required: true
  db_root_password:
    description: 'Root password (MySQL only)'
    required: false
  host_port:
    description: 'Host port to publish (optional)'
    required: false
  data_volume:
    description: 'Podman volume name or host path for data persistence'
    required: false
  memory_limit:
    description: 'Memory limit, e.g., 512m'
    required: false
    default: '512m'
  image_tag:
    description: 'Image tag to use for DB (postgres default: 16, mysql default: 8)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      run: |
        set -euo pipefail
        if [ -z "${{ inputs.ssh_host }}" ]; then echo 'Error: ssh_host is required' ; exit 1 ; fi
        if [ -z "${{ inputs.ssh_user }}" ]; then echo 'Error: ssh_user is required' ; exit 1 ; fi
        if [ -z "${{ inputs.ssh_key }}" ]; then echo 'Error: ssh_key is required' ; exit 1 ; fi
        case "${{ inputs.db_type }}" in postgres|mysql) :;; *) echo 'Error: db_type must be postgres|mysql' ; exit 1 ;;
        esac
        if [ -z "${{ inputs.service_name }}" ]; then echo 'Error: service_name is required' ; exit 1 ; fi
        if [ -z "${{ inputs.db_name }}" ]; then echo 'Error: db_name is required' ; exit 1 ; fi
        if [ -z "${{ inputs.db_user }}" ]; then echo 'Error: db_user is required' ; exit 1 ; fi
        if [ -z "${{ inputs.db_password }}" ]; then echo 'Error: db_password is required' ; exit 1 ; fi
      shell: bash

    - name: Run DB container
      uses: uncoverthefuture-org/actions@master
      with:
        subaction: remote-podman-exec
        params_json: |
          {
            "ssh_host": "${{ inputs.ssh_host }}",
            "ssh_user": "${{ inputs.ssh_user }}",
            "ssh_key": "${{ inputs.ssh_key }}",
            "root_ssh_key": "${{ inputs.root_ssh_key }}",
            "ssh_port": "${{ inputs.ssh_port }}",
            "ssh_fingerprint": "${{ inputs.ssh_fingerprint }}",
            "podman_user": "${{ inputs.podman_user }}",
            "connect_mode": "${{ inputs.connect_mode }}",
            "source_env": "false",
            "command": "set -euo pipefail\n\nTYPE='${{ inputs.db_type }}'\nNAME='${{ inputs.service_name }}'\nDB='${{ inputs.db_name }}'\nUSER='${{ inputs.db_user }}'\nPASS='${{ inputs.db_password }}'\nROOT='${{ inputs.db_root_password }}'\nHOST_PORT='${{ inputs.host_port }}'\nVOL='${{ inputs.data_volume }}'\nMEM='${{ inputs.memory_limit }}'\nTAG='${{ inputs.image_tag }}'\n\ncase \"$TYPE\" in\n  postgres)\n    IMG=\"postgres:${TAG:-16}\"\n    PORT=\"5432\"\n    ENV_ARGS=\"-e POSTGRES_DB=\\\"$DB\\\" -e POSTGRES_USER=\\\"$USER\\\" -e POSTGRES_PASSWORD=\\\"$PASS\\\"\"\n    DATA_PATH='/var/lib/postgresql/data'\n    ;;\n  mysql)\n    IMG=\"mysql:${TAG:-8}\"\n    PORT=\"3306\"\n    if [ -z \"$ROOT\" ]; then\n      ROOT=\"$PASS\"\n    fi\n    ENV_ARGS=\"-e MYSQL_DATABASE=\\\"$DB\\\" -e MYSQL_USER=\\\"$USER\\\" -e MYSQL_PASSWORD=\\\"$PASS\\\" -e MYSQL_ROOT_PASSWORD=\\\"$ROOT\\\"\"\n    DATA_PATH='/var/lib/mysql'\n    ;;\nesac\n\nrun_podman stop \"$NAME\" >/dev/null 2>&1 || true\nrun_podman rm \"$NAME\" >/dev/null 2>&1 || true\n\nPORT_ARGS=\"\"\nif [ -n \"$HOST_PORT\" ]; then\n  PORT_ARGS=\"-p ${HOST_PORT}:${PORT}\"\nfi\n\nVOL_ARGS=\"\"\nif [ -n \"$VOL\" ]; then\n  case \"$VOL\" in\n    /*)\n      VOL_ARGS=\"-v ${VOL}:${DATA_PATH}\"\n      ;;\n    *)\n      run_podman volume inspect \"$VOL\" >/dev/null 2>&1 || run_podman volume create \"$VOL\" >/dev/null\n      VOL_ARGS=\"-v ${VOL}:${DATA_PATH}\"\n      ;;\n  esac\nfi\n\nrun_podman run -d --name \"$NAME\" \\\n  ${PORT_ARGS} \\\n  --restart=unless-stopped \\\n  --memory=\"$MEM\" --memory-swap=\"$MEM\" \\\n  ${VOL_ARGS} \\\n  ${ENV_ARGS} \\\n  \"$IMG\""
          }}"
