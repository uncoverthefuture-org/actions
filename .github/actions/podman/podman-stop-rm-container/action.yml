name: 'Podman Stop and Remove Container'
description: 'Stops and removes a container by name on a remote host via Podman.'

inputs:
  ssh_host:
    description: 'SSH host'
    required: true
  ssh_user:
    description: 'SSH username (non-root)'
    required: true
  ssh_key:
    description: 'SSH private key for non-root user'
    required: true
  root_ssh_key:
    description: 'SSH private key for root (optional)'
    required: false
  ssh_port:
    description: 'SSH port'
    required: false
    default: '22'
  ssh_fingerprint:
    description: 'Server SSH host key fingerprint to verify host identity (optional but recommended)'
    required: false
  podman_user:
    description: 'User on remote host to execute podman commands as'
    required: false
    default: 'deployer'
  connect_mode:
    description: "How to connect: 'auto' (default), 'root', or 'user'"
    required: false
    default: 'auto'

  # Container naming
  container_name:
    description: 'Name of the container to stop/remove. If empty, defaults to app_slug-env_name.'
    required: false
  app_slug:
    description: 'Slug used in default container name'
    required: false
    default: 'ekaban-api'
  env_name:
    description: 'Environment name'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      run: |
        set -euo pipefail
        if [ -z "${{ inputs.ssh_host }}" ]; then echo 'Error: ssh_host is required' ; exit 1 ; fi
        if [ -z "${{ inputs.ssh_user }}" ]; then echo 'Error: ssh_user is required' ; exit 1 ; fi
        if [ -z "${{ inputs.ssh_key }}" ]; then echo 'Error: ssh_key is required' ; exit 1 ; fi
      shell: bash

    - name: Stop and remove container
      uses: uncoverthefuture-org/actions/.github/actions/podman/remote-podman-exec@v1.0.35
      with:
        ssh_host: ${{ inputs.ssh_host }}
        ssh_user: ${{ inputs.ssh_user }}
        ssh_key: ${{ inputs.ssh_key }}
        root_ssh_key: ${{ inputs.root_ssh_key }}
        ssh_port: ${{ inputs.ssh_port }}
        ssh_fingerprint: ${{ inputs.ssh_fingerprint }}
        podman_user: ${{ inputs.podman_user }}
        connect_mode: ${{ inputs.connect_mode }}
        source_env: 'false'
        fail_if_env_missing: 'false'
        inline_script: |
          set -euo pipefail
          CN_IN='${{ inputs.container_name }}'
          APP_SLUG='${{ inputs.app_slug }}'
          ENV_NAME='${{ inputs.env_name }}'
          CONTAINER_NAME="${CN_IN:-${APP_SLUG}-${ENV_NAME}}"

          run_podman stop "$CONTAINER_NAME" >/dev/null 2>&1 || true
          run_podman rm "$CONTAINER_NAME" >/dev/null 2>&1 || true
