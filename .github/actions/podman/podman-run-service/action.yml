# ============================================================================
# ACTION: Podman Run Service
# ============================================================================
# PURPOSE:
# Runs a long-lived container service on a remote host via Podman over SSH.
# Used for background workers, schedulers, databases, and other services.
#
# WHAT IT DOES:
# 1. Validates all required inputs
# 2. Connects to remote server via SSH
# 3. Starts container with specified image and command
# 4. Configures restart policy, memory limits, volumes
# 5. Optionally publishes ports
#
# WHEN TO USE:
# - Run background worker containers (Celery, etc.)
# - Run scheduler containers (Celery Beat, etc.)
# - Run database containers (PostgreSQL, MySQL, etc.)
# - Run any long-lived service container
#
# EXAMPLES:
# - Background worker: celery -A app worker -l info
# - Scheduler: celery -A app beat -l info
# - Database: PostgreSQL or MySQL container
#
# REFERENCE: See docs/ACTION_FILES_GUIDE.md for complete guide
# ============================================================================

name: 'Podman Run Service'
description: 'Runs a long-lived container (service) via Podman on a remote host with optional memory limit and env file.'

# ============================================================================
# INPUTS - Organized by category
# ============================================================================
inputs:
  # ========================================================================
  # SSH / REMOTE EXECUTION
  # ========================================================================
  ssh_host:
    description: 'SSH host (IP or hostname). Required. Example: 192.168.1.100'
    required: true
  ssh_user:
    description: 'SSH username (non-root). Required. Used for authentication'
    required: true
  ssh_key:
    description: 'SSH private key for authentication. Required. Should be stored as GitHub secret'
    required: true
  root_ssh_key:
    description: 'SSH private key for root (optional). Use if ssh_user cannot escalate to root'
    required: false
  ssh_port:
    description: 'SSH port. Default: 22. Change if using non-standard SSH port'
    required: false
    default: '22'
  ssh_fingerprint:
    description: 'Server SSH host key fingerprint for verification. Optional but recommended for security'
    required: false
  podman_user:
    description: 'User on remote host to execute podman commands as. Default: deployer'
    required: false
    default: 'deployer'
  connect_mode:
    description: "Connection mode: 'auto' (default), 'root', or 'user'. See docs/ARCHITECTURE.md"
    required: false
    default: 'auto'

  # ========================================================================
  # CONTAINER CONFIGURATION
  # ========================================================================
  service_name:
    description: 'Container name for the service. Required. Example: myapp-worker or db-postgres'
    required: true
  image:
    description: 'Docker image to run. Required. Example: ghcr.io/myorg/myapp:v1.0.0'
    required: true
  command:
    description: 'Command to run in container. Optional. Example: celery -A app worker -l info'
    required: false
  env_file:
    description: 'Path to .env file on remote host. Optional. Example: /var/deployments/production/myapp/.env'
    required: false

  # ========================================================================
  # PORT PUBLISHING
  # ========================================================================
  host_port:
    description: 'Host port to publish. Optional. Example: 5432 for database'
    required: false
  container_port:
    description: 'Container port (used with host_port). Optional. Example: 5432'
    required: false

  # ========================================================================
  # CONTAINER RUNTIME OPTIONS
  # ========================================================================
  restart_policy:
    description: 'Restart policy. Default: unless-stopped. Options: no, always, on-failure, unless-stopped'
    required: false
    default: 'unless-stopped'
  memory_limit:
    description: 'Memory limit for container. Default: 512m. Examples: 256m, 1g, 2g'
    required: false
    default: '512m'
  extra_run_args:
    description: 'Additional podman run arguments. Optional. Example: --cap-add NET_ADMIN'
    required: false

  # ========================================================================
  # STORAGE CONFIGURATION
  # ========================================================================
  volumes:
    description: 'Newline-separated list of volume/mount specs. Optional. Examples: myvol:/data or /host:/container'
    required: false

# ============================================================================
# EXECUTION STEPS
# ============================================================================
# The service startup follows these steps:
# 1. Validate inputs - Check required parameters
# 2. Run service - Start container on remote host
#
# REFERENCE: See docs/ACTION_FILES_GUIDE.md for detailed step explanations
# ============================================================================

runs:
  using: 'composite'
  steps:
    # ========================================================================
    # STEP 1: Validate inputs
    # ========================================================================
    # Checks that all required parameters are provided
    # ========================================================================
    - name: Validate inputs
      run: |
        set -euo pipefail
        if [ -z "${{ inputs.ssh_host }}" ]; then echo 'Error: ssh_host is required' ; exit 1 ; fi
        if [ -z "${{ inputs.ssh_user }}" ]; then echo 'Error: ssh_user is required' ; exit 1 ; fi
        if [ -z "${{ inputs.ssh_key }}" ]; then echo 'Error: ssh_key is required' ; exit 1 ; fi
        if [ -z "${{ inputs.service_name }}" ]; then echo 'Error: service_name is required' ; exit 1 ; fi
        if [ -z "${{ inputs.image }}" ]; then echo 'Error: image is required' ; exit 1 ; fi
      shell: bash

    - name: Run service
      uses: ./.github/actions/podman/remote-podman-exec
      with:
        ssh_host: ${{ inputs.ssh_host }}
        ssh_user: ${{ inputs.ssh_user }}
        ssh_key: ${{ inputs.ssh_key }}
        root_ssh_key: ${{ inputs.root_ssh_key }}
        ssh_port: ${{ inputs.ssh_port }}
        ssh_fingerprint: ${{ inputs.ssh_fingerprint }}
        podman_user: ${{ inputs.podman_user }}
        connect_mode: ${{ inputs.connect_mode }}
        source_env: 'false'
        fail_if_env_missing: 'false'
        inline_script: |
          set -euo pipefail

          NAME='${{ inputs.service_name }}'
          IMAGE='${{ inputs.image }}'
          ENV_FILE='${{ inputs.env_file }}'
          RESTART='${{ inputs.restart_policy }}'
          MEM='${{ inputs.memory_limit }}'
          EXTRA='${{ inputs.extra_run_args }}'

          run_podman stop "$NAME" >/dev/null 2>&1 || true
          run_podman rm "$NAME" >/dev/null 2>&1 || true

          PORT_ARGS=""
          if [ -n "${{ inputs.host_port }}" ] && [ -n "${{ inputs.container_port }}" ]; then
            PORT_ARGS="-p ${{ inputs.host_port }}:${{ inputs.container_port }}"
          fi

          VOL_ARGS=""
          if [ -n "${{ inputs.volumes }}" ]; then
            printf '%s\n' "${{ inputs.volumes }}" | while IFS= read -r line; do
              [ -z "$line" ] && continue
              VOL_ARGS="$VOL_ARGS -v $line"
            done
          fi

          CMD_STR='${{ inputs.command }}'

          run_podman run -d --name "$NAME" \
            ${ENV_FILE:+--env-file "$ENV_FILE"} \
            ${PORT_ARGS} \
            --restart="$RESTART" \
            --memory="$MEM" --memory-swap="$MEM" \
            ${VOL_ARGS} \
            ${EXTRA:+$EXTRA} \
            "$IMAGE" ${CMD_STR:+$CMD_STR}
