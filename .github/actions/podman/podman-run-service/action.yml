name: 'Podman Run Service'
description: 'Runs a long-lived container (service) via Podman on a remote host with optional memory limit and env file.'

inputs:
  ssh_host:
    description: 'SSH host'
    required: true
  ssh_user:
    description: 'SSH username (non-root)'
    required: true
  ssh_key:
    description: 'SSH private key for non-root user'
    required: true
  root_ssh_key:
    description: 'SSH private key for root (optional)'
    required: false
  ssh_port:
    description: 'SSH port'
    required: false
    default: '22'
  ssh_fingerprint:
    description: 'Server SSH host key fingerprint to verify host identity (optional but recommended)'
    required: false
  podman_user:
    description: 'User on remote host to execute podman commands as'
    required: false
    default: 'deployer'
  connect_mode:
    description: "How to connect: 'auto' (default), 'root', or 'user'"
    required: false
    default: 'auto'

  # Container runtime
  service_name:
    description: 'Container name for the service'
    required: true
  image:
    description: 'Container image to run'
    required: true
  env_file:
    description: 'Path to env file on remote host'
    required: false
  command:
    description: 'Command to run in container'
    required: false
  host_port:
    description: 'Host port to publish (optional)'
    required: false
  container_port:
    description: 'Container port (used with host_port)'
    required: false
  restart_policy:
    description: 'Restart policy'
    required: false
    default: 'unless-stopped'
  memory_limit:
    description: 'Memory limit, e.g., 512m (applies to container)'
    required: false
    default: '512m'
  extra_run_args:
    description: 'Additional podman run args'
    required: false
  volumes:
    description: 'Newline-separated list of volume/Mount specs (e.g., myvol:/var/lib/data or /host:/container)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      run: |
        set -euo pipefail
        if [ -z "${{ inputs.ssh_host }}" ]; then echo 'Error: ssh_host is required' ; exit 1 ; fi
        if [ -z "${{ inputs.ssh_user }}" ]; then echo 'Error: ssh_user is required' ; exit 1 ; fi
        if [ -z "${{ inputs.ssh_key }}" ]; then echo 'Error: ssh_key is required' ; exit 1 ; fi
        if [ -z "${{ inputs.service_name }}" ]; then echo 'Error: service_name is required' ; exit 1 ; fi
        if [ -z "${{ inputs.image }}" ]; then echo 'Error: image is required' ; exit 1 ; fi
      shell: bash

    - name: Run service
      uses: uncoverthefuture-org/actions/.github/actions/podman/remote-podman-exec@v1
      with:
        ssh_host: ${{ inputs.ssh_host }}
        ssh_user: ${{ inputs.ssh_user }}
        ssh_key: ${{ inputs.ssh_key }}
        root_ssh_key: ${{ inputs.root_ssh_key }}
        ssh_port: ${{ inputs.ssh_port }}
        ssh_fingerprint: ${{ inputs.ssh_fingerprint }}
        podman_user: ${{ inputs.podman_user }}
        connect_mode: ${{ inputs.connect_mode }}
        source_env: 'false'
        inline_script: |
          set -euo pipefail

          NAME='${{ inputs.service_name }}'
          IMAGE='${{ inputs.image }}'
          ENV_FILE='${{ inputs.env_file }}'
          RESTART='${{ inputs.restart_policy }}'
          MEM='${{ inputs.memory_limit }}'
          EXTRA='${{ inputs.extra_run_args }}'

          run_podman stop "$NAME" >/dev/null 2>&1 || true
          run_podman rm "$NAME" >/dev/null 2>&1 || true

          PORT_ARGS=""
          if [ -n "${{ inputs.host_port }}" ] && [ -n "${{ inputs.container_port }}" ]; then
            PORT_ARGS="-p ${{ inputs.host_port }}:${{ inputs.container_port }}"
          fi

          VOL_ARGS=""
          if [ -n "${{ inputs.volumes }}" ]; then
            while IFS= read -r line; do
              [ -z "$line" ] && continue
              VOL_ARGS="$VOL_ARGS -v $line"
            done << 'EOFV'
${{ inputs.volumes }}
EOFV
          fi

          CMD_STR='${{ inputs.command }}'

          run_podman run -d --name "$NAME" \
            ${ENV_FILE:+--env-file "$ENV_FILE"} \
            ${PORT_ARGS} \
            --restart="$RESTART" \
            --memory="$MEM" --memory-swap="$MEM" \
            ${VOL_ARGS} \
            ${EXTRA:+$EXTRA} \
            "$IMAGE" ${CMD_STR:+$CMD_STR}
