# ============================================================================
# ACTION: Podman Run Service
# ============================================================================
# PURPOSE:
# Runs a long-lived container service on a remote host via Podman over SSH.
# Used for background workers, schedulers, databases, and other services.
#
# WHAT IT DOES:
# 1. Validates all required inputs
# 2. Connects to remote server via SSH
# 3. Starts container with specified image and command
# 4. Configures restart policy, memory limits, volumes
# 5. Optionally publishes ports
#
# WHEN TO USE:
# - Run background worker containers (Celery, etc.)
# - Run scheduler containers (Celery Beat, etc.)
# - Run database containers (PostgreSQL, MySQL, etc.)
# - Run any long-lived service container
#
# EXAMPLES:
# - Background worker: celery -A app worker -l info
# - Scheduler: celery -A app beat -l info
# - Database: PostgreSQL or MySQL container
#
# REFERENCE: See docs/ACTION_FILES_GUIDE.md for complete guide
# ============================================================================

name: 'Podman Run Service'
description: 'Runs a long-lived container (service) via Podman on a remote host with optional memory limit and env file.'

# ============================================================================
# INPUTS - Organized by category
# ============================================================================
inputs:
  # ========================================================================
  # SSH / REMOTE EXECUTION
  # ========================================================================
  ssh_host:
    description: 'SSH host (IP or hostname). Required. Example: 192.168.1.100'
    required: true
  ssh_user:
    description: 'SSH username (non-root). Required. Used for authentication'
    required: true
  ssh_key:
    description: 'SSH private key for authentication. Required. Should be stored as GitHub secret'
    required: true
  root_ssh_key:
    description: 'SSH private key for root (optional). Use if ssh_user cannot escalate to root'
    required: false
  ssh_port:
    description: 'SSH port. Default: 22. Change if using non-standard SSH port'
    required: false
    default: '22'
  ssh_fingerprint:
    description: 'Server SSH host key fingerprint for verification. Optional but recommended for security'
    required: false
  skip_upload:
    description: 'Skip staging/upload (assumes scripts deployed via deploy-server-scripts)'
    required: false
    default: 'true'

  # ========================================================================
  # CONTAINER CONFIGURATION
  # ========================================================================
  service_name:
    description: 'Container name for the service. Required. Example: myapp-worker or db-postgres'
    required: true
  image:
    description: 'Docker image to run. Required. Example: ghcr.io/myorg/myapp:v1.0.0'
    required: true
  command:
    description: 'Command to run in container. Optional. Example: celery -A app worker -l info'
    required: false
  env_file:
    description: 'Path to .env file on remote host. Optional. Example: /var/deployments/production/myapp/.env'
    required: false

  # ========================================================================
  # PORT PUBLISHING
  # ========================================================================
  host_port:
    description: 'Host port to publish. Optional. Example: 5432 for database'
    required: false
  container_port:
    description: 'Container port (used with host_port). Optional. Example: 5432'
    required: false

  # ========================================================================
  # CONTAINER RUNTIME OPTIONS
  # ========================================================================
  restart_policy:
    description: 'Restart policy. Default: unless-stopped. Options: no, always, on-failure, unless-stopped'
    required: false
    default: 'unless-stopped'
  memory_limit:
    description: 'Memory limit for container. Default: 512m. Examples: 256m, 1g, 2g'
    required: false
    default: '512m'
  extra_run_args:
    description: 'Additional podman run arguments. Optional. Example: --cap-add NET_ADMIN'
    required: false

  # ========================================================================
  # STORAGE CONFIGURATION
  # ========================================================================
  volumes:
    description: 'Newline-separated list of volume/mount specs. Optional. Examples: myvol:/data or /host:/container'
    required: false

# ============================================================================
# EXECUTION STEPS
# ============================================================================
# The service startup follows these steps:
# 1. Validate inputs - Check required parameters
# 2. Run service - Start container on remote host
#
# REFERENCE: See docs/ACTION_FILES_GUIDE.md for detailed step explanations
# ============================================================================

runs:
  using: 'composite'
  steps:
    # SSH reachability probe to avoid scp/ssh hangs
    - name: Check SSH reachability
      id: reach
      shell: bash
      env:
        SSH_HOST: ${{ inputs.ssh_host }}
        SSH_USER: ${{ inputs.ssh_user }}
        SSH_KEY: ${{ inputs.ssh_key }}
        SSH_PORT: ${{ inputs.ssh_port }}
      run: |
        set -euo pipefail
        KEY_FILE="$(mktemp)"
        trap "rm -f '$KEY_FILE'" EXIT
        if printf '%s' "$SSH_KEY" | grep -q '\\n'; then
          printf '%s\n' "$SSH_KEY" | sed 's/\\n/\n/g' > "$KEY_FILE"
        else
          printf '%s\n' "$SSH_KEY" > "$KEY_FILE"
        fi
        chmod 600 "$KEY_FILE"
        if ssh -i "$KEY_FILE" -o BatchMode=yes -o StrictHostKeyChecking=no -o ConnectTimeout=8 -p "${SSH_PORT:-22}" "$SSH_USER@$SSH_HOST" true 2>/dev/null; then
          echo "reachable=true" >> "$GITHUB_OUTPUT"
        else
          echo "reachable=false" >> "$GITHUB_OUTPUT"
        fi
    # ========================================================================
    # STEP 1: Validate inputs
    # ========================================================================
    # Checks that all required parameters are provided
    # ========================================================================
    - name: Validate inputs
      run: |
        set -euo pipefail
        if [ -z "${{ inputs.ssh_host }}" ]; then echo 'Error: ssh_host is required' ; exit 1 ; fi
        if [ -z "${{ inputs.ssh_user }}" ]; then echo 'Error: ssh_user is required' ; exit 1 ; fi
        if [ -z "${{ inputs.ssh_key }}" ]; then echo 'Error: ssh_key is required' ; exit 1 ; fi
        if [ -z "${{ inputs.service_name }}" ]; then echo 'Error: service_name is required' ; exit 1 ; fi
        if [ -z "${{ inputs.image }}" ]; then echo 'Error: image is required' ; exit 1 ; fi
      shell: bash

    # Stage: Copy script from action path to workspace
    - name: Stage run-service script
      if: ${{ steps.reach.outputs.reachable == 'true' && inputs.skip_upload != 'true' }}
      shell: bash
      env:
        ACTION_PATH: ${{ github.action_path }}
        WORKSPACE: ${{ github.workspace }}
      run: |
        set -euo pipefail
        mkdir -p "$WORKSPACE/.uactions_cache"
        cp "$ACTION_PATH/../../scripts/podman/run-service.sh" "$WORKSPACE/.uactions_cache/run-service.sh"

    # Upload: Transfer script to remote /tmp via scp
    - name: Upload run-service script
      if: ${{ steps.reach.outputs.reachable == 'true' && inputs.skip_upload != 'true' }}
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ inputs.ssh_host }}
        username: ${{ inputs.ssh_user }}
        key: ${{ inputs.ssh_key }}
        port: ${{ inputs.ssh_port }}
        source: ".uactions_cache/run-service.sh"
        target: "/tmp"
        overwrite: true
        timeout: 15s
        command_timeout: 30s

    # Execute: Move to /opt/uactions/scripts/, chmod, export env, run
    - name: Run service
      if: ${{ steps.reach.outputs.reachable == 'true' }}
      uses: ./.github/actions/podman/remote-podman-exec
      with:
        ssh_host: ${{ inputs.ssh_host }}
        ssh_user: ${{ inputs.ssh_user }}
        ssh_key: ${{ inputs.ssh_key }}
        root_ssh_key: ${{ inputs.root_ssh_key }}
        ssh_port: ${{ inputs.ssh_port }}
        ssh_fingerprint: ${{ inputs.ssh_fingerprint }}
        connect_mode: ${{ inputs.connect_mode }}
        source_env: 'false'
        fail_if_env_missing: 'false'
        inline_script: |
          set -euo pipefail
          # Move script from /tmp to /opt/uactions/scripts/
          mkdir -p /opt/uactions/scripts/podman
          if [ -f /tmp/run-service.sh ]; then
            mv -f /tmp/run-service.sh /opt/uactions/scripts/podman/run-service.sh
          fi
          chmod +x /opt/uactions/scripts/podman/run-service.sh
          
          # Export env vars for script
          export SERVICE_NAME='${{ inputs.service_name }}'
          export IMAGE='${{ inputs.image }}'
          # Compute PORTS only when both host_port and container_port are provided
          HP='${{ inputs.host_port }}'
          CP='${{ inputs.container_port }}'
          if [ -n "$HP" ] && [ -n "$CP" ]; then
            export PORTS="$HP:$CP"
          else
            export PORTS=''
          fi
          export EXTRA_ARGS='${{ inputs.extra_run_args }}'
          export RESTART_POLICY='${{ inputs.restart_policy }}'
          export MEMORY_LIMIT='${{ inputs.memory_limit }}'
          export ENV_FILE='${{ inputs.env_file }}'
          export VOLUMES='${{ inputs.volumes }}'
          export COMMAND='${{ inputs.command }}'
          
          # Execute server-managed script
          /opt/uactions/scripts/podman/run-service.sh
