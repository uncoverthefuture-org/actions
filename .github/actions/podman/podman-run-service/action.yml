name: 'Podman Run Service'
description: 'Runs a long-lived container (service) via Podman on a remote host with optional memory limit and env file.'

inputs:
  ssh_host:
    description: 'SSH host'
    required: true
  ssh_user:
    description: 'SSH username (non-root)'
    required: true
  ssh_key:
    description: 'SSH private key for non-root user'
    required: true
  root_ssh_key:
    description: 'SSH private key for root (optional)'
    required: false
  ssh_port:
    description: 'SSH port'
    required: false
    default: '22'
  ssh_fingerprint:
    description: 'Server SSH host key fingerprint to verify host identity (optional but recommended)'
    required: false
  podman_user:
    description: 'User on remote host to execute podman commands as'
    required: false
    default: 'deployer'
  connect_mode:
    description: "How to connect: 'auto' (default), 'root', or 'user'"
    required: false
    default: 'auto'

  # Container runtime
  service_name:
    description: 'Container name for the service'
    required: true
  image:
    description: 'Container image to run'
    required: true
  env_file:
    description: 'Path to env file on remote host'
    required: false
  command:
    description: 'Command to run in container'
    required: false
  host_port:
    description: 'Host port to publish (optional)'
    required: false
  container_port:
    description: 'Container port (used with host_port)'
    required: false
  restart_policy:
    description: 'Restart policy'
    required: false
    default: 'unless-stopped'
  memory_limit:
    description: 'Memory limit, e.g., 512m (applies to container)'
    required: false
    default: '512m'
  extra_run_args:
    description: 'Additional podman run args'
    required: false
  volumes:
    description: 'Newline-separated list of volume/Mount specs (e.g., myvol:/var/lib/data or /host:/container)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      run: |
        set -euo pipefail
        if [ -z "${{ inputs.ssh_host }}" ]; then echo 'Error: ssh_host is required' ; exit 1 ; fi
        if [ -z "${{ inputs.ssh_user }}" ]; then echo 'Error: ssh_user is required' ; exit 1 ; fi
        if [ -z "${{ inputs.ssh_key }}" ]; then echo 'Error: ssh_key is required' ; exit 1 ; fi
        if [ -z "${{ inputs.service_name }}" ]; then echo 'Error: service_name is required' ; exit 1 ; fi
        if [ -z "${{ inputs.image }}" ]; then echo 'Error: image is required' ; exit 1 ; fi
      shell: bash

    - name: Run service
      uses: uncoverthefuture-org/actions@
      with:
        subaction: remote-podman-exec
        params_json: |
          {
            "ssh_host": "${{ inputs.ssh_host }}",
            "ssh_user": "${{ inputs.ssh_user }}",
            "ssh_key": "${{ inputs.ssh_key }}",
            "root_ssh_key": "${{ inputs.root_ssh_key }}",
            "ssh_port": "${{ inputs.ssh_port }}",
            "ssh_fingerprint": "${{ inputs.ssh_fingerprint }}",
            "podman_user": "${{ inputs.podman_user }}",
            "connect_mode": "${{ inputs.connect_mode }}",
            "source_env": "false",
            "command": "set -euo pipefail\n\nNAME='${{ inputs.service_name }}'\nIMAGE='${{ inputs.image }}'\nENV_FILE='${{ inputs.env_file }}'\nRESTART='${{ inputs.restart_policy }}'\nMEM='${{ inputs.memory_limit }}'\nEXTRA='${{ inputs.extra_run_args }}'\n\nrun_podman stop \"$NAME\" >/dev/null 2>&1 || true\nrun_podman rm \"$NAME\" >/dev/null 2>&1 || true\n\nPORT_ARGS=\"\"\nif [ -n \"${{ inputs.host_port }}\" ] && [ -n \"${{ inputs.container_port }}\" ]; then\n  PORT_ARGS=\"-p ${{ inputs.host_port }}:${{ inputs.container_port }}\"\nfi\n\nVOL_ARGS=\"\"\nif [ -n \"${{ inputs.volumes }}\" ]; then\n  while IFS= read -r line; do\n    [ -z \"$line\" ] && continue\n    VOL_ARGS=\"$VOL_ARGS -v $line\"\n  done << 'EOFV'\n${{ inputs.volumes }}\nEOFV\nfi\n\nCMD_STR='${{ inputs.command }}'\n\nrun_podman run -d --name \"$NAME\" \\\n  ${ENV_FILE:+--env-file \"$ENV_FILE\"} \\\n  ${PORT_ARGS} \\\n  --restart=\"$RESTART\" \\\n  --memory=\"$MEM\" --memory-swap=\"$MEM\" \\\n  ${VOL_ARGS} \\\n  ${EXTRA:+$EXTRA} \\\n  \"$IMAGE\" ${CMD_STR:+$CMD_STR}"
          }
