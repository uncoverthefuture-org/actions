name: 'Build and Push Docker Image'
description: 'Builds and pushes a Docker image for a Django API, determining environment context.'

inputs:
  registry:
    description: 'Docker registry to use'
    required: false
    default: 'ghcr.io'
  image_name:
    description: 'Name of the Docker image'
    required: false
  github_token:
    description: 'GitHub token for authentication'
    required: false
  environment_script:
    description: 'Path to the script that sets environment context'
    required: false
    default: '.github/scripts/set-environment-context.sh'

outputs:
  env_name:
    description: 'Environment name'
    value: ${{ steps.environment.outputs.env_name }}
  env_key:
    description: 'Environment key'
    value: ${{ steps.environment.outputs.env_key }}
  image_tag:
    description: 'Image tag'
    value: ${{ steps.environment.outputs.image_tag }}
  deploy_enabled:
    description: 'Whether deployment is enabled'
    value: ${{ steps.environment.outputs.deploy_enabled }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      run: |
        : # no strict validation; defaults are applied below
      shell: bash
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine environment context
      id: environment
      run: |
        set -euo pipefail
        SCRIPT='${{ inputs.environment_script }}'
        if [ -f "$SCRIPT" ]; then
          bash "$SCRIPT"
        else
          REF_NAME="${GITHUB_REF_NAME:-}"
          SHA7="${GITHUB_SHA:-unknown}"
          SHA7="${SHA7:0:7}"
          case "$REF_NAME" in
            main|master)
              ENV_NAME='production'
              ENV_KEY='prod'
              DEPLOY='true'
              ;;
            stage|staging)
              ENV_NAME='staging'
              ENV_KEY='staging'
              DEPLOY='true'
              ;;
            dev|develop|development)
              ENV_NAME='dev'
              ENV_KEY='dev'
              DEPLOY='true'
              ;;
            refs/tags/*)
              ENV_NAME='production'
              ENV_KEY='prod'
              DEPLOY='true'
              ;;
            *)
              ENV_NAME='dev'
              ENV_KEY='dev'
              DEPLOY='false'
              ;;
          esac
          IMAGE_TAG="${ENV_NAME}-${SHA7}"
          echo "env_name=$ENV_NAME" >> "$GITHUB_OUTPUT"
          echo "env_key=$ENV_KEY" >> "$GITHUB_OUTPUT"
          echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "deploy_enabled=$DEPLOY" >> "$GITHUB_OUTPUT"
        fi
      shell: bash

    - name: Log in to registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ inputs.github_token != '' && inputs.github_token || github.token }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ inputs.image_name != '' && inputs.image_name || github.repository }}
        tags: |
          type=raw,value=${{ steps.environment.outputs.image_tag }}

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
