name: 'dispatch: build'
description: 'Build dispatch: route short calls to build actions'

inputs:
  subaction:
    description: "build-and-push"
    required: true
  params_json:
    description: "JSON blob of parameters to pass (image_name, github_token, registry)"
    required: false
  image_name:
    required: false
  github_token:
    required: false
  registry:
    required: false
    default: 'ghcr.io'
  env_name:
    required: false
  env_key:
    required: false
  deploy_enabled:
    required: false
  image_tag:
    required: false
  environment_script:
    required: false

outputs:
  env_name:
    description: 'Environment name from build step'
    value: ${{ steps.call.outputs.env_name }}
  env_key:
    description: 'Environment key from build step'
    value: ${{ steps.call.outputs.env_key }}
  image_tag:
    description: 'Image tag produced by build step'
    value: ${{ steps.call.outputs.image_tag }}
  deploy_enabled:
    description: 'Whether deployment is enabled'
    value: ${{ steps.call.outputs.deploy_enabled }}

runs:
  using: 'composite'
  steps:
    - name: Ensure bundled actions
      uses: ./.github/actions/common/ensure-bundled-actions

    - name: Normalize params JSON
      id: pjson
      uses: ./.github/actions/common/normalize-params
      with:
        params_json: ${{ inputs.params_json }}
    - name: Validate build subaction
      run: |
        set -euo pipefail
        SA='${{ inputs.subaction }}'
        case "$SA" in build-and-push) :;; *) echo "::error title=Unsupported build subaction::Unsupported build subaction '$SA'"; echo "Error: unsupported build subaction '$SA'" >&2; exit 1;; esac
      shell: bash

    - name: Determine environment context
      id: environment
      uses: ./.github/actions/common/determine-env-context
      with:
        env_name: ${{ inputs.env_name != '' && inputs.env_name || fromJSON(steps.pjson.outputs.json).env_name }}
        env_key: ${{ inputs.env_key != '' && inputs.env_key || fromJSON(steps.pjson.outputs.json).env_key }}
        deploy_enabled: ${{ inputs.deploy_enabled != '' && inputs.deploy_enabled || fromJSON(steps.pjson.outputs.json).deploy_enabled }}
        image_tag: ${{ inputs.image_tag != '' && inputs.image_tag || fromJSON(steps.pjson.outputs.json).image_tag }}
        environment_script: ${{ inputs.environment_script != '' && inputs.environment_script || fromJSON(steps.pjson.outputs.json).environment_script }}

    - name: Ensure runner has disk space
      uses: ./.github/actions/common/cleanup-runner
      with:
        min_free_gb: '5'

    - name: build-and-push
      id: call
      if: ${{ inputs.subaction == 'build-and-push' }}
      uses: ./.github/actions/build/build-and-push
      with:
        image_name: ${{ inputs.image_name != '' && inputs.image_name || fromJSON(steps.pjson.outputs.json).image_name }}
        github_token: ${{ inputs.github_token != '' && inputs.github_token || fromJSON(steps.pjson.outputs.json).github_token }}
        registry: ${{ inputs.registry != '' && inputs.registry || fromJSON(steps.pjson.outputs.json).registry }}
        env_name: ${{ steps.environment.outputs.env_name }}
        env_key: ${{ steps.environment.outputs.env_key }}
        deploy_enabled: ${{ steps.environment.outputs.deploy_enabled }}
        image_tag: ${{ steps.environment.outputs.image_tag }}
